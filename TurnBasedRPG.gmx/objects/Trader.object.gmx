<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHero</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_shop = false;
gold = 250 + irandom(250);

image_speed = 0;
name = "Zbigniew";

eq[2, 1] = irandom(1) - 1;
if(eq[2, 1] != -1) eq[2, 5] = irandom(sprite_get_number(sprEqHead));
eq[3, 1] = 1;
eq[3, 5] = irandom(sprite_get_number(sprEqHead));
eq[4, 1] = 1;
eq[4, 5] = irandom(sprite_get_number(sprEqHead));
eq[5, 1] = irandom(1) - 1;
if(eq[5, 1] != -1) eq[5, 5] = irandom(sprite_get_number(sprEqHead));
eq[6, 1] = 1;
eq[6, 5] = irandom(sprite_get_number(sprEqHead));

surf = surface_create(128, 128);

image_scale = 1;
x_shift = 0;
y_shift = 0;

default_armback = 10;
default_forearmback = 10;
default_handback = 0;

default_armfront = -10;
default_forearmfront = 10;
default_handfront = 0;

default_legback = 0;
default_forelegback = 0;
default_footback = 10;

default_legfront = -5;
default_forelegfront = 0;
default_footfront = 0;

default_body = 0;
default_head = 0;

dir_armback = default_armback;
dir_forearmback = default_forearmback;
dir_handback = default_handback;
dir_legback = default_legback;
dir_forelegback = default_forelegback;
dir_footback = default_footback;
dir_body = default_body;
dir_head = default_head;
dir_legfront = default_legfront;
dir_forelegfront = default_forelegfront;
dir_footfront = default_footfront;
dir_armfront = default_armfront;
dir_forearmfront = default_forearmfront;
dir_handfront = default_handfront;

change_armback = 0;
change_forearmback = 0;
change_handback = 0;
change_legback = 0;
change_forelegback = 0;
change_footback = 0;
change_body = 0;
change_head = 0;
change_legfront = 0;
change_forelegfront = 0;
change_footfront = 0;
change_armfront = 0;
change_forearmfront = 0;
change_handfront = 0;

lendir_armback[0] = point_distance(0,0,3,-10) * image_scale;
lendir_armback[1] = point_direction(0,0,3,-10);
lendir_armback[2] = lendir_armback[1] + 2 * angle_difference(90,lendir_armback[1]);

lendir_forearmback[0] = point_distance(0,0,-1,11) * image_scale;
lendir_forearmback[1] = point_direction(0,0,-1,11);
lendir_forearmback[2] = lendir_forearmback[1] + 2 * angle_difference(90,lendir_forearmback[1]);

lendir_handback[0] = point_distance(0,0,0,7) * image_scale;
lendir_handback[1] = point_direction(0,0,0,7);
lendir_handback[2] = lendir_handback[1] + 2 * angle_difference(90,lendir_handback[1]);


lendir_legback[0] = point_distance(0,0,4,10) * image_scale;
lendir_legback[1] = point_direction(0,0,4,10);
lendir_legback[2] = lendir_legback[1] + 2 * angle_difference(90,lendir_legback[1]);

lendir_forelegback[0] = point_distance(0,0,0,8) * image_scale;
lendir_forelegback[1] = point_direction(0,0,0,8);
lendir_forelegback[2] = lendir_forelegback[1] + 2 * angle_difference(90,lendir_forelegback[1]);

lendir_footback[0] = point_distance(0,0,0,8) * image_scale;
lendir_footback[1] = point_direction(0,0,0,8);
lendir_footback[2] = lendir_footback[1] + 2 * angle_difference(90,lendir_footback[1]);


lendir_headside[0] = point_distance(0,0,-3,-14) * image_scale;
lendir_headside[1] = point_direction(0,0,-3,-14);
lendir_headside[2] = lendir_headside[1] + 2 * angle_difference(90,lendir_headside[1]);


lendir_legfront[0] = point_distance(0,0,-2,12) * image_scale;
lendir_legfront[1] = point_direction(0,0,-2,12);
lendir_legfront[2] = lendir_legfront[1] + 2 * angle_difference(90,lendir_legfront[1]);

lendir_forelegfront[0] = point_distance(0,0,0,8) * image_scale;
lendir_forelegfront[1] = point_direction(0,0,0,8);
lendir_forelegfront[2] = lendir_forelegfront[1] + 2 * angle_difference(90,lendir_forelegfront[1]);

lendir_footfront[0] = point_distance(0,0,0,8) * image_scale;
lendir_footfront[1] = point_direction(0,0,0,8);
lendir_footfront[2] = lendir_footfront[1] + 2 * angle_difference(90,lendir_footfront[1]);


lendir_armfront[0] = point_distance(0,0,-5,-10) * image_scale;
lendir_armfront[1] = point_direction(0,0,-5,-10);
lendir_armfront[2] = lendir_armfront[1] + 2 * angle_difference(90,lendir_armfront[1]);

lendir_forearmfront[0] = point_distance(0,0,-1,11) * image_scale;
lendir_forearmfront[1] = point_direction(0,0,-1,11);
lendir_forearmfront[2] = lendir_forearmfront[1] + 2 * angle_difference(90,lendir_forearmfront[1]);

lendir_handfront[0] = point_distance(0,0,0,7) * image_scale;
lendir_handfront[1] = point_direction(0,0,0,7);
lendir_handfront[2] = lendir_handfront[1] + 2 * angle_difference(90,lendir_handfront[1]);

for(i = 0; i &lt; 24; i ++)
{
    temp = irandom(1);
    if(temp == 1)
    {
        inv[i, 1] = choose(irandom(9), 21 + irandom(4));
        switch(inv[i, 1])
        {
            case 0:
                inv[i, 0] = "Przedmiot";
                break;
            case 1:
                inv[i, 0] = "Miecz dlugi";
                inv[i, 2] = 80 + irandom(40);
                inv[i, 3] = 80 + irandom(40);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 2:
                inv[i, 0] = "Topor";
                inv[i, 2] = 80 + irandom(40);
                inv[i, 3] = 80 + irandom(40);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 3:
                inv[i, 0] = "Miecz";
                inv[i, 2] = 60 + irandom(30);
                inv[i, 3] = 60 + irandom(30);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 4:
                inv[i, 0] = "Siekiera";
                inv[i, 2] = 60 + irandom(30);
                inv[i, 3] = 60 + irandom(30);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 5:
                inv[i, 0] = "Sztylet";
                inv[i, 2] = 60 + irandom(30);
                inv[i, 3] = 60 + irandom(30);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 6:
                inv[i, 0] = "Luk";
                inv[i, 2] = 80 + irandom(40);
                inv[i, 3] = 80 + irandom(40);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 7:
                inv[i, 0] = "Kusza";
                inv[i, 2] = 80 + irandom(40);
                inv[i, 3] = 80 + irandom(40);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 8:
                inv[i, 0] = "Pistolet";
                inv[i, 2] = 60 + irandom(30);
                inv[i, 3] = 60 + irandom(30);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 9:
                inv[i, 0] = "Glawia";
                inv[i, 2] = 60 + irandom(30);
                inv[i, 3] = 60 + irandom(30);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 21:
                inv[i, 0] = "Helm";
                inv[i, 2] = 15 + irandom(15);
                inv[i, 3] = 15 + irandom(15);
                inv[i, 4] = 0.02 + random(0.03);
                inv[i, 5] = irandom(2);
                break;
            case 22:
                inv[i, 0] = "Zbroja";
                inv[i, 2] = 30 + irandom(20);
                inv[i, 3] = 30 + irandom(20);
                inv[i, 4] = 0.05 + random(0.05);
                inv[i, 5] = irandom(2);
                break;
            case 23:
                inv[i, 0] = "Spodnie";
                inv[i, 2] = 30 + irandom(20);
                inv[i, 3] = 30 + irandom(20);
                inv[i, 4] = 0.05 + random(0.05);
                inv[i, 5] = irandom(2);
                break;
            case 24:
                inv[i, 0] = "Rekawice";
                inv[i, 2] = 15 + irandom(15);
                inv[i, 3] = 15 + irandom(15);
                inv[i, 4] = 0.02 + random(0.03);
                inv[i, 5] = irandom(2);
                break;
            case 25:
                inv[i, 0] = "Buty";
                inv[i, 2] = 15 + irandom(15);
                inv[i, 3] = 15 + irandom(15);
                inv[i, 4] = 0.02 + random(0.03);
                inv[i, 5] = irandom(2);
                break;
            default:
                inv[i, 0] = "Blad";
        }
    }
    else
    {
        inv[i, 1] = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(direction &gt; 90 &amp;&amp; direction &lt; 270) model_dir = 2;
else model_dir = 0;

if(show_shop)
{
    for(i = 0; i &lt; 24; i ++)
    {
        if(mouse_x &gt;= view_xview + (view_wview / 2 - 270 + 68 * (i % 8)) &amp;&amp; mouse_x &lt;= view_xview + (view_wview / 2 - 270 + 68 * (i % 8)) + 64 &amp;&amp; mouse_y &gt;= view_yview + (40 + 68 * (floor(i / 8))) &amp;&amp; mouse_y &lt;= view_yview + (40 + 68 * (floor(i / 8))) + 64)
        {
            shop_mouseover[i] = true;
        }
        else shop_mouseover[i] = false;
    }
    
    for(i = 0; i &lt; 24; i ++)
    {
        if(mouse_x &gt;= view_xview + (view_wview / 2 - 270 + 68 * (i % 8)) &amp;&amp; mouse_x &lt;= view_xview + (view_wview / 2 - 270 + 68 * (i % 8)) + 64 &amp;&amp; mouse_y &gt;= view_yview + (view_hview - 216 - 24 + 68 * (floor(i / 8))) &amp;&amp; mouse_y &lt;= view_yview + (view_hview - 216 - 24 + 68 * (floor(i / 8))) + 64)
        {
            inv_mouseover[i] = true;
        }
        else inv_mouseover[i] = false;
    }
    
    if(mouse_check_button_pressed(mb_right))
    {
        for(i = 0; i &lt; 24; i ++)
        {
            if(shop_mouseover[i])
            {
                if( (inv[i, 1] &gt; 0 &amp;&amp; InvCtrl.gold &gt;= round(1.2 * mean(inv[i, 2], inv[i, 3], inv[i, 4]))) || (inv[i, 1] == 0 &amp;&amp; InvCtrl.gold &gt;= 24) )
                {
                    for(j = 0; j &lt; 24; j++)
                    {
                        if(InvCtrl.inv[j, 1] == -1)
                        {
                            if(inv[i, 1] &gt; 0)
                            {
                                gold += round(1.2 * mean(inv[i, 2], inv[i, 3], inv[i, 4]));
                                InvCtrl.gold -= round(1.2 * mean(inv[i, 2], inv[i, 3], inv[i, 4]));
                            }
                            else
                            {
                                gold += 24;
                                InvCtrl.gold -= 24;
                            }
                            
                            for(k = 0; k &lt; 6; k++)
                            {
                                InvCtrl.inv[j, k] = inv[i, k];
                                inv[i, k] = -1;
                            }
                            break;
                        }
                    }
                }
            }
            
            if(inv_mouseover[i])
            {
                if( (InvCtrl.inv[i, 1] &gt; 0 &amp;&amp; gold &gt;= round(mean(InvCtrl.inv[i, 2], InvCtrl.inv[i, 3], InvCtrl.inv[i, 4]))) || (InvCtrl.inv[i, 1] == 0 &amp;&amp; gold &gt;= 20) )
                {
                    for(j = 0; j &lt; 24; j++)
                    {
                        if(inv[j, 1] == -1)
                        {
                            if(InvCtrl.inv[i, 1] &gt; 0)
                            {
                                gold -= round(mean(InvCtrl.inv[i, 2], InvCtrl.inv[i, 3], InvCtrl.inv[i, 4]));
                                InvCtrl.gold += round(mean(InvCtrl.inv[i, 2], InvCtrl.inv[i, 3], InvCtrl.inv[i, 4]));
                            }
                            else
                            {
                                gold -= 20;
                                InvCtrl.gold += 20;
                            }
                            
                            for(k = 0; k &lt; 6; k++)
                            {
                                inv[j, k] = InvCtrl.inv[i, k];
                                InvCtrl.inv[i, k] = -1;
                            }
                            break;
                        }
                    }
                }
            }
        }
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>near = instance_nearest(x, y, Hero);
if(sqrt((x - near.x)*(x - near.x) + 4*(y - near.y)*(y - near.y)) &lt; 80) show_shop = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(show_shop)
{
    //shop

    draw_set_alpha(0.5);
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 - 278, 216 + 32, view_wview /2 + 278, 32, false);
    draw_rectangle(view_wview / 2 + 136, 30, view_wview / 2 + 278, 12, false);
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_text(view_wview / 2 + 140, 14, "Zloto: " + string(gold));
    draw_set_colour(c_black);
    
    for(i = 0; i &lt; 24; i ++)
    {
        draw_set_colour(c_black);
        draw_rectangle(view_wview / 2 - 270 + 68 * (i % 8), 40 + 68 * (floor(i / 8)), view_wview / 2 - 270 + 68 * (i % 8) + 64, 40 + 68 * (floor(i / 8)) + 64, false);
        draw_set_colour($808080);
        draw_rectangle(view_wview / 2 - 270 + 68 * (i % 8), 40 + 68 * (floor(i / 8)), view_wview / 2 - 270 + 68 * (i % 8) + 64, 40 + 68 * (floor(i / 8)) + 64, true);
    
        if(inv[i, 1] == 0) draw_sprite(sprItemIcon, 0, view_wview / 2 - 270 + 68 * (i % 8), 40 + 68 * (floor(i / 8)));
        if(inv[i, 1] &gt;= 1 &amp;&amp; inv[i, 1] &lt;= 9) draw_sprite(sprWeaponIcon, -1 + inv[i, 1], view_wview / 2 - 270 + 68 * (i % 8), 40 + 68 * (floor(i / 8)));
        if(inv[i, 1] &gt;= 21 &amp;&amp; inv[i, 1] &lt;= 25) draw_sprite(sprArmorIcon, -21 + inv[i, 1], view_wview / 2 - 270 + 68 * (i % 8), 40 + 68 * (floor(i / 8)));
    }
    
    for(i = 0; i &lt; 24; i ++)
    {
        if(shop_mouseover[i])
        {
            if(inv[i, 1] != -1)
            {
                draw_set_alpha(0.5);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 112 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, false);
                draw_set_alpha(1);
                draw_set_colour(c_gray);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 112 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, true);
                draw_set_colour(c_orange);
                draw_text(mouse_x + 8 - view_xview, mouse_y - 112 - view_yview, string(inv[i, 0]));
                draw_set_colour(c_white);
                
                switch(inv[i, 1])
                {
                    /*
                    0 - inne - nie do ubrania
            
                    1 - miecz 2h
                    2 - miecz 1h
                    3 - topor 2h
                    4 - siekiera 1h
                    5 - sztylet 1h
                    6 - luk 2h
                    7 - kusza 2h
                    8 - pistolet 1h
                    9 - glawia 1h
                    
                    21 - helm
                    22 - zbroja
                    23 - spodnie
                    24 - rekawice
                    25 - buty
                    */
                    
                    case 0:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Przedmiot");
                        break;
                    case 1:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Miecz dlugi");
                        break;
                    case 2:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Topor");
                        break;
                    case 3:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Miecz krotki");
                        break;
                    case 4:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Siekiera");
                        break;
                    case 5:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Sztylet");
                        break;
                    case 6:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Luk");
                        break;
                    case 7:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Kusza");
                        break;
                    case 8:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Pistolet");
                        break;
                    case 9:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Glawia");
                        break;
                    case 21:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Helm");
                        break;
                    case 22:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Zbroja");
                        break;
                    case 23:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Spodnie");
                        break;
                    case 24:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Rekawice");
                        break;
                    case 25:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Buty");
                        break;
                    default:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Nieznane");
                }
                
                if(inv[i, 1] &gt; 0)
                {
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 32 - view_yview, "Atak: " + string(inv[i, 2]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 48 - view_yview, "DoT: " + string(inv[i, 3]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 64 - view_yview, "Szybkosc: " + string(inv[i, 4]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 80 - view_yview, "Wartosc: " + string(round(1.2 * mean(inv[i, 2], inv[i, 3], inv[i, 4]))));
                }
                else draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 80 - view_yview, "Wartosc: 24");
                draw_set_colour(c_black);
            }
        }
    }

    //inv

    draw_set_alpha(0.5);
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 - 278, view_hview - 216 - 32, view_wview /2 + 278, view_hview - 32, false);
    draw_rectangle(view_wview / 2 + 136, view_hview - 30, view_wview / 2 + 278, view_hview - 12, false);
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_text(view_wview / 2 + 140, view_hview - 28, "Zloto: " + string(InvCtrl.gold));
    draw_set_colour(c_black);
    
    for(i = 0; i &lt; 24; i ++)
    {
        draw_set_colour(c_black);
        draw_rectangle(view_wview / 2 - 270 + 68 * (i % 8), view_hview - 216 - 24 + 68 * (floor(i / 8)), view_wview / 2 - 270 + 68 * (i % 8) + 64, view_hview - 216 - 24 + 68 * (floor(i / 8)) + 64, false);
        draw_set_colour($808080);
        draw_rectangle(view_wview / 2 - 270 + 68 * (i % 8), view_hview - 216 - 24 + 68 * (floor(i / 8)), view_wview / 2 - 270 + 68 * (i % 8) + 64, view_hview - 216 - 24 + 68 * (floor(i / 8)) + 64, true);
    
        if(InvCtrl.inv[i, 1] == 0) draw_sprite(sprItemIcon, 0, view_wview / 2 - 270 + 68 * (i % 8), view_hview - 216 - 24 + 68 * (floor(i / 8)));
        if(InvCtrl.inv[i, 1] &gt;= 1 &amp;&amp; InvCtrl.inv[i, 1] &lt;= 9) draw_sprite(sprWeaponIcon, -1 + InvCtrl.inv[i, 1], view_wview / 2 - 270 + 68 * (i % 8), view_hview - 216 - 24 + 68 * (floor(i / 8)));
        if(InvCtrl.inv[i, 1] &gt;= 21 &amp;&amp; InvCtrl.inv[i, 1] &lt;= 25) draw_sprite(sprArmorIcon, -21 + InvCtrl.inv[i, 1], view_wview / 2 - 270 + 68 * (i % 8), view_hview - 216 - 24 + 68 * (floor(i / 8)));
    }
    
    for(i = 0; i &lt; 24; i ++)
    {
        if(inv_mouseover[i])
        {
            if(InvCtrl.inv[i, 1] != -1)
            {
                draw_set_alpha(0.5);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 112 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, false);
                draw_set_alpha(1);
                draw_set_colour(c_gray);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 112 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, true);
                draw_set_colour(c_orange);
                draw_text(mouse_x + 8 - view_xview, mouse_y - 112 - view_yview, string(InvCtrl.inv[i, 0]));
                draw_set_colour(c_white);
                
                switch(InvCtrl.inv[i, 1])
                {
                    /*
                    0 - inne - nie do ubrania
            
                    1 - miecz 2h
                    2 - miecz 1h
                    3 - topor 2h
                    4 - siekiera 1h
                    5 - sztylet 1h
                    6 - luk 2h
                    7 - kusza 2h
                    8 - pistolet 1h
                    9 - glawia 1h
                    
                    21 - helm
                    22 - zbroja
                    23 - spodnie
                    24 - rekawice
                    25 - buty
                    */
                    
                    case 0:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Przedmiot");
                        break;
                    case 1:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Miecz dlugi");
                        break;
                    case 2:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Topor");
                        break;
                    case 3:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Miecz krotki");
                        break;
                    case 4:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Siekiera");
                        break;
                    case 5:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Sztylet");
                        break;
                    case 6:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Luk");
                        break;
                    case 7:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Kusza");
                        break;
                    case 8:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Pistolet");
                        break;
                    case 9:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Glawia");
                        break;
                    case 21:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Helm");
                        break;
                    case 22:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Zbroja");
                        break;
                    case 23:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Spodnie");
                        break;
                    case 24:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Rekawice");
                        break;
                    case 25:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Buty");
                        break;
                    default:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 16 - view_yview, "Nieznane");
                }
                
                if(InvCtrl.inv[i, 1] &gt; 0)
                {
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 32 - view_yview, "Atak: " + string(InvCtrl.inv[i, 2]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 48 - view_yview, "DoT: " + string(InvCtrl.inv[i, 3]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 64 - view_yview, "Szybkosc: " + string(InvCtrl.inv[i, 4]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 80 - view_yview, "Wartosc: " + string(round(mean(InvCtrl.inv[i, 2], InvCtrl.inv[i, 3], InvCtrl.inv[i, 4]))));
                }
                else draw_text(mouse_x + 8 - view_xview, mouse_y - 112 + 80 - view_yview, "Wartosc: 20");
                draw_set_colour(c_black);
            }
        }
    }
    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!surface_exists(surf)) surf = surface_create(128, 128);
surface_set_target(surf);
draw_clear_alpha(c_black,0);

//tyl
if(eq[3, 1] == -1) draw_sprite_ext(sprArm, 0, 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]), image_xscale, image_yscale, dir_armback, c_white, image_alpha);
else draw_sprite_ext(sprEqArm, eq[3, 5], 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]), image_xscale, image_yscale, dir_armback, c_white, image_alpha);
if(eq[3, 1] == -1) draw_sprite_ext(sprForeArm, 0, 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_x(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_y(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]), image_xscale, image_yscale, dir_armback + dir_forearmback, c_white, image_alpha);
else draw_sprite_ext(sprEqForeArm, eq[3, 5], 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_x(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_y(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]), image_xscale, image_yscale, dir_armback + dir_forearmback, c_white, image_alpha);
if(eq[5, 1] == -1) draw_sprite_ext(sprHand, 0, 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_x(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]) + lengthdir_x(lendir_handback[0], dir_body + dir_armback + dir_forearmback + lendir_handback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_y(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]) + lengthdir_y(lendir_handback[0], dir_body + dir_armback + dir_forearmback + lendir_handback[1]), image_xscale, image_yscale, dir_armback + dir_forearmback + dir_handback, c_white, image_alpha);
else draw_sprite_ext(sprEqHand, eq[5, 5], 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_x(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]) + lengthdir_x(lendir_handback[0], dir_body + dir_armback + dir_forearmback + lendir_handback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_y(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]) + lengthdir_y(lendir_handback[0], dir_body + dir_armback + dir_forearmback + lendir_handback[1]), image_xscale, image_yscale, dir_armback + dir_forearmback + dir_handback, c_white, image_alpha);

if(eq[4, 1] == -1) draw_sprite_ext(sprLeg, 0, 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]), image_xscale, image_yscale, dir_legback, c_white, image_alpha);
else draw_sprite_ext(sprEqLeg, eq[4, 5], 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]), image_xscale, image_yscale, dir_legback, c_white, image_alpha);
if(eq[4, 1] == -1) draw_sprite_ext(sprForeLeg, 0, 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_x(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_y(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]), image_xscale, image_yscale, dir_legback + dir_forelegback, c_white, image_alpha);
else draw_sprite_ext(sprEqForeLeg, eq[4, 5], 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_x(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_y(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]), image_xscale, image_yscale, dir_legback + dir_forelegback, c_white, image_alpha);
if(eq[6, 1] == -1) draw_sprite_ext(sprFoot, 0, 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_x(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]) + lengthdir_x(lendir_footback[0], dir_body + dir_legback + dir_forelegback + lendir_footback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_y(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]) + lengthdir_y(lendir_footback[0], dir_body + dir_legback + dir_forelegback + lendir_footback[1]), image_xscale, image_yscale, dir_legback + dir_forelegback + dir_footback, c_white, image_alpha);
else draw_sprite_ext(sprEqFoot, eq[6, 5], 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_x(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]) + lengthdir_x(lendir_footback[0], dir_body + dir_legback + dir_forelegback + lendir_footback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_y(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]) + lengthdir_y(lendir_footback[0], dir_body + dir_legback + dir_forelegback + lendir_footback[1]), image_xscale, image_yscale, dir_legback + dir_forelegback + dir_footback, c_white, image_alpha);

//srodek
if(eq[3, 1] == -1) draw_sprite_ext(sprBodySide, 0, 64 + x_shift, 64  + y_shift, image_xscale, image_yscale, dir_body, c_white, image_alpha);
else draw_sprite_ext(sprEqBody, eq[3, 5], 64 + x_shift, 64  + y_shift, image_xscale, image_yscale, dir_body, c_white, image_alpha);
draw_sprite_ext(sprHeadSide, 0, 64 + x_shift + lengthdir_x(lendir_headside[0], dir_body + lendir_headside[1]), 64  + y_shift + lengthdir_y(lendir_headside[0], dir_body + lendir_headside[1]), image_xscale, image_yscale, dir_head, c_white, image_alpha);
if(eq[2, 1] != -1) draw_sprite_ext(sprEqHead, eq[2, 5], 64 + x_shift + lengthdir_x(lendir_headside[0], dir_body + lendir_headside[1]), 64  + y_shift + lengthdir_y(lendir_headside[0], dir_body + lendir_headside[1]), image_xscale, image_yscale, dir_head, c_white, image_alpha);

//przod
if(eq[4, 1] == -1) draw_sprite_ext(sprLeg, 0, 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]), image_xscale, image_yscale, dir_legfront, c_white, image_alpha);
else draw_sprite_ext(sprEqLeg, eq[4, 5], 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]), image_xscale, image_yscale, dir_legfront, c_white, image_alpha);
if(eq[4, 1] == -1) draw_sprite_ext(sprForeLeg, 0, 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_x(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_y(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]), image_xscale, image_yscale, dir_legfront + dir_forelegfront, c_white, image_alpha);
else draw_sprite_ext(sprEqForeLeg, eq[4, 5], 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_x(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_y(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]), image_xscale, image_yscale, dir_legfront + dir_forelegfront, c_white, image_alpha);
if(eq[6, 1] == -1) draw_sprite_ext(sprFoot, 0, 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_x(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]) + lengthdir_x(lendir_footfront[0], dir_body + dir_legfront + dir_forelegfront + lendir_footfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_y(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]) + lengthdir_y(lendir_footfront[0], dir_body + dir_legfront + dir_forelegfront + lendir_footfront[1]), image_xscale, image_yscale, dir_legfront + dir_forelegfront + dir_footfront, c_white, image_alpha);
else draw_sprite_ext(sprEqFoot, eq[6, 5], 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_x(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]) + lengthdir_x(lendir_footfront[0], dir_body + dir_legfront + dir_forelegfront + lendir_footfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_y(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]) + lengthdir_y(lendir_footfront[0], dir_body + dir_legfront + dir_forelegfront + lendir_footfront[1]), image_xscale, image_yscale, dir_legfront + dir_forelegfront + dir_footfront, c_white, image_alpha);

if(eq[3, 1] == -1) draw_sprite_ext(sprArm, 0, 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]), image_xscale, image_yscale, dir_armfront, c_white, image_alpha);
else draw_sprite_ext(sprEqArm, eq[3, 5], 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]), image_xscale, image_yscale, dir_armfront, c_white, image_alpha);
if(eq[3, 1] == -1) draw_sprite_ext(sprForeArm, 0, 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_x(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_y(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]), image_xscale, image_yscale, dir_armfront + dir_forearmfront, c_white, image_alpha);
else draw_sprite_ext(sprEqForeArm, eq[3, 5], 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_x(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_y(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]), image_xscale, image_yscale, dir_armfront + dir_forearmfront, c_white, image_alpha);
if(eq[5, 1] == -1) draw_sprite_ext(sprHand, 0, 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_x(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]) + lengthdir_x(lendir_handfront[0], dir_body + dir_armfront + dir_forearmfront + lendir_handfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_y(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]) + lengthdir_y(lendir_handfront[0], dir_body + dir_armfront + dir_forearmfront + lendir_handfront[1]), image_xscale, image_yscale, dir_armfront + dir_forearmfront + dir_handfront, c_white, image_alpha);
else draw_sprite_ext(sprEqHand, eq[5, 5], 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_x(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]) + lengthdir_x(lendir_handfront[0], dir_body + dir_armfront + dir_forearmfront + lendir_handfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_y(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]) + lengthdir_y(lendir_handfront[0], dir_body + dir_armfront + dir_forearmfront + lendir_handfront[1]), image_xscale, image_yscale, dir_armfront + dir_forearmfront + dir_handfront, c_white, image_alpha);

surface_reset_target();
if(model_dir == 0) draw_surface_ext(surf, x - 64, y - 94, 1, 1, 0, c_white, 1);
if(model_dir == 2) draw_surface_ext(surf, x + 64, y - 94, -1, 1, 0, c_white, 1);

draw_sprite(sprTraderIcon, 0, x, y - 96);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
