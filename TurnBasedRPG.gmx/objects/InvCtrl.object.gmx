<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprController</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//wczytanie z save

grabbed_item[0] = 0;
grabbed_item[1] = -1;
grabbed_item[2] = 0;
grabbed_item[3] = 0;
grabbed_item[4] = 0;
grabbed_item[5] = 0;

grabbed_skill = 0;
show_char = false;
show_inv = false;
current_eq = 0;
dirwheel_mouseover = false;
sprite_index = sprBlank;
check_eq = true;

gold = 0;
xp = 0;
lvl = 1;
xp_to_lvl = 100 + ((lvl - 1) * 50);
stats_to_spend = 0;

for(i = 0; i &lt; 8; i++)
{
    for(j = 0; j &lt; 4; j++)
    {
        quest[i, j] = 0;
    }
    quest_tracking[i] = false;
}

quests = 0;
show_quests = false;

/*

0 - imie
1 - atak
2 - obrazenia krytyczne
3 - obrazenia DoT
4 - zywotnosc +maxHP
5 - zrecznosc +maxAP
6 - inicjatywa

1 pkt = 10%

*/

heroBase[0, 0] = "Jacek";
heroBase[0, 1] = 10 + irandom(10);
heroBase[0, 2] = 10 + irandom(10);
heroBase[0, 3] = 10 + irandom(10);
heroBase[0, 4] = 10 + irandom(10);
heroBase[0, 5] = 10 + irandom(10);
heroBase[0, 6] = 10 + irandom(10);

heroBase[1, 0] = "John Wick";
heroBase[1, 1] = 10 + irandom(10);
heroBase[1, 2] = 10 + irandom(10);
heroBase[1, 3] = 10 + irandom(10);
heroBase[1, 4] = 10 + irandom(10);
heroBase[1, 5] = 10 + irandom(10);
heroBase[1, 6] = 10 + irandom(10);

heroBase[2, 0] = "Janusz";
heroBase[2, 1] = 10 + irandom(10);
heroBase[2, 2] = 10 + irandom(10);
heroBase[2, 3] = 10 + irandom(10);
heroBase[2, 4] = 10 + irandom(10);
heroBase[2, 5] = 10 + irandom(10);
heroBase[2, 6] = 10 + irandom(10);

heroBase[3, 0] = "Jurand";
heroBase[3, 1] = 10 + irandom(10);
heroBase[3, 2] = 10 + irandom(10);
heroBase[3, 3] = 10 + irandom(10);
heroBase[3, 4] = 10 + irandom(10);
heroBase[3, 5] = 10 + irandom(10);
heroBase[3, 6] = 10 + irandom(10);

/*

0 - mainhand
1 - offhand
2 - helm
3 - armor
4 - pants
5 - gloves
6 - boots

0 - nazwa
1 - typ:

    0 - inne - nie do ubrania
    
    1 - miecz 2h
    2 - topor 2h
    3 - miecz 1h
    4 - siekiera 1h
    5 - sztylet 1h
    6 - luk 2h
    7 - kusza 2h
    8 - pistolet 1h
    9 - glawia 1h
    
    21 - helm
    22 - zbroja
    23 - spodnie
    24 - rekawice
    25 - buty
    
2 - atak / pancerz
3 - dot / ochrona przed dot
4 - szybkosc / ciezar (multipliery do maxAP)
5 - ikona (image_index)

*/

eq1[1, 1] = -1;
eq2[1, 1] = -1;
eq3[1, 1] = -1;
eq4[1, 1] = -1;

eq1[0, 0] = "Ostrze najemnika";
eq1[0, 1] = 2;
eq1[0, 2] = 100;
eq1[0, 3] = 0;
eq1[0, 4] = 1;
eq1[0, 5] = 2;

eq1[2, 0] = "Kaptur najemnika";
eq1[2, 1] = 21;
eq1[2, 2] = 11;
eq1[2, 3] = 13;
eq1[2, 4] = 0.02;
eq1[2, 5] = 0;

eq1[3, 0] = "Kurtka najemnika";
eq1[3, 1] = 22;
eq1[3, 2] = 23;
eq1[3, 3] = 28;
eq1[3, 4] = 0.06;
eq1[3, 5] = 0;

eq1[4, 0] = "Spodnie najemnika";
eq1[4, 1] = 23;
eq1[4, 2] = 20;
eq1[4, 3] = 24;
eq1[4, 4] = 0.05;
eq1[4, 5] = 0;

eq1[5, 0] = "Rekawice najemnika";
eq1[5, 1] = 24;
eq1[5, 2] = 11;
eq1[5, 3] = 19;
eq1[5, 4] = 0.02;
eq1[5, 5] = 0;

eq1[6, 0] = "Buty najemnika";
eq1[6, 1] = 25;
eq1[6, 2] = 14;
eq1[6, 3] = 14;
eq1[6, 4] = 0.03;
eq1[6, 5] = 0;


eq2[0, 0] = "Ostrze zabojcy";
eq2[0, 1] = 1;
eq2[0, 2] = 100;
eq2[0, 3] = 0;
eq2[0, 4] = 1;
eq2[0, 5] = 2;

eq2[2, 0] = "Kaptur zabojcy";
eq2[2, 1] = 21;
eq2[2, 2] = 11;
eq2[2, 3] = 13;
eq2[2, 4] = 0.02;
eq2[2, 5] = 0;

eq2[3, 0] = "Kurtka zabojcy";
eq2[3, 1] = 22;
eq2[3, 2] = 23;
eq2[3, 3] = 28;
eq2[3, 4] = 0.06;
eq2[3, 5] = 0;

eq2[4, 0] = "Spodnie zabojcy";
eq2[4, 1] = 23;
eq2[4, 2] = 20;
eq2[4, 3] = 24;
eq2[4, 4] = 0.05;
eq2[4, 5] = 0;

eq2[5, 0] = "Rekawice zabojcy";
eq2[5, 1] = 24;
eq2[5, 2] = 11;
eq2[5, 3] = 19;
eq2[5, 4] = 0.02;
eq2[5, 5] = 0;

eq2[6, 0] = "Buty zabojcy";
eq2[6, 1] = 25;
eq2[6, 2] = 14;
eq2[6, 3] = 14;
eq2[6, 4] = 0.03;
eq2[6, 5] = 0;


eq3[0, 0] = "Ostrze bohatera";
eq3[0, 1] = 1;
eq3[0, 2] = 100;
eq3[0, 3] = 0;
eq3[0, 4] = 1;
eq3[0, 5] = 2;

eq3[2, 0] = "Kaptur bohatera";
eq3[2, 1] = 21;
eq3[2, 2] = 11;
eq3[2, 3] = 13;
eq3[2, 4] = 0.02;
eq3[2, 5] = 2;

eq3[3, 0] = "Kurtka bohatera";
eq3[3, 1] = 22;
eq3[3, 2] = 23;
eq3[3, 3] = 28;
eq3[3, 4] = 0.06;
eq3[3, 5] = 2;

eq3[4, 0] = "Spodnie bohatera";
eq3[4, 1] = 23;
eq3[4, 2] = 20;
eq3[4, 3] = 24;
eq3[4, 4] = 0.05;
eq3[4, 5] = 2;

eq3[5, 0] = "Rekawice bohatera";
eq3[5, 1] = 24;
eq3[5, 2] = 11;
eq3[5, 3] = 19;
eq3[5, 4] = 0.02;
eq3[5, 5] = 2;

eq3[6, 0] = "Buty bohatera";
eq3[6, 1] = 25;
eq3[6, 2] = 14;
eq3[6, 3] = 14;
eq3[6, 4] = 0.03;
eq3[6, 5] = 2;


eq4[0, 0] = "Ostrze szpiega";
eq4[0, 1] = 1;
eq4[0, 2] = 100;
eq4[0, 3] = 0;
eq4[0, 4] = 1;
eq4[0, 5] = 2;

eq4[2, 0] = "Kaptur szpiega";
eq4[2, 1] = 21;
eq4[2, 2] = 11;
eq4[2, 3] = 13;
eq4[2, 4] = 0.02;
eq4[2, 5] = 1;

eq4[3, 0] = "Kurtka szpiega";
eq4[3, 1] = 22;
eq4[3, 2] = 23;
eq4[3, 3] = 28;
eq4[3, 4] = 0.06;
eq4[3, 5] = 1;

eq4[4, 0] = "Spodnie szpiega";
eq4[4, 1] = 23;
eq4[4, 2] = 20;
eq4[4, 3] = 24;
eq4[4, 4] = 0.05;
eq4[4, 5] = 1;

eq4[5, 0] = "Rekawice szpiega";
eq4[5, 1] = 24;
eq4[5, 2] = 11;
eq4[5, 3] = 19;
eq4[5, 4] = 0.02;
eq4[5, 5] = 1;

eq4[6, 0] = "Buty szpiega";
eq4[6, 1] = 25;
eq4[6, 2] = 14;
eq4[6, 3] = 14;
eq4[6, 4] = 0.03;
eq4[6, 5] = 1;


for(i = 0; i &lt; 7; i++)
{
    eq_mouseover[i] = false;
}

for(i = 0; i &lt; 24; i ++)
{
    temp = irandom(1);
    if(temp == 1)
    {
        inv[i, 1] = choose(irandom(9), 21 + irandom(4));
        switch(inv[i, 1])
        {
            case 0:
                inv[i, 0] = "Przedmiot";
                break;
            case 1:
                inv[i, 0] = "Miecz dlugi";
                inv[i, 2] = 80 + irandom(40);
                inv[i, 3] = 80 + irandom(40);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 2:
                inv[i, 0] = "Topor";
                inv[i, 2] = 80 + irandom(40);
                inv[i, 3] = 80 + irandom(40);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 3:
                inv[i, 0] = "Miecz";
                inv[i, 2] = 60 + irandom(30);
                inv[i, 3] = 60 + irandom(30);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 4:
                inv[i, 0] = "Siekiera";
                inv[i, 2] = 60 + irandom(30);
                inv[i, 3] = 60 + irandom(30);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 5:
                inv[i, 0] = "Sztylet";
                inv[i, 2] = 60 + irandom(30);
                inv[i, 3] = 60 + irandom(30);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 6:
                inv[i, 0] = "Luk";
                inv[i, 2] = 80 + irandom(40);
                inv[i, 3] = 80 + irandom(40);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 7:
                inv[i, 0] = "Kusza";
                inv[i, 2] = 80 + irandom(40);
                inv[i, 3] = 80 + irandom(40);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 8:
                inv[i, 0] = "Pistolet";
                inv[i, 2] = 60 + irandom(30);
                inv[i, 3] = 60 + irandom(30);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 9:
                inv[i, 0] = "Glawia";
                inv[i, 2] = 60 + irandom(30);
                inv[i, 3] = 60 + irandom(30);
                inv[i, 4] = 0.8 + random(0.4);
                inv[i, 5] = irandom(2);
                break;
            case 21:
                inv[i, 0] = "Helm";
                inv[i, 2] = 15 + irandom(15);
                inv[i, 3] = 15 + irandom(15);
                inv[i, 4] = 0.02 + random(0.03);
                inv[i, 5] = irandom(2);
                break;
            case 22:
                inv[i, 0] = "Zbroja";
                inv[i, 2] = 30 + irandom(20);
                inv[i, 3] = 30 + irandom(20);
                inv[i, 4] = 0.05 + random(0.05);
                inv[i, 5] = irandom(2);
                break;
            case 23:
                inv[i, 0] = "Spodnie";
                inv[i, 2] = 30 + irandom(20);
                inv[i, 3] = 30 + irandom(20);
                inv[i, 4] = 0.05 + random(0.05);
                inv[i, 5] = irandom(2);
                break;
            case 24:
                inv[i, 0] = "Rekawice";
                inv[i, 2] = 15 + irandom(15);
                inv[i, 3] = 15 + irandom(15);
                inv[i, 4] = 0.02 + random(0.03);
                inv[i, 5] = irandom(2);
                break;
            case 25:
                inv[i, 0] = "Buty";
                inv[i, 2] = 15 + irandom(15);
                inv[i, 3] = 15 + irandom(15);
                inv[i, 4] = 0.02 + random(0.03);
                inv[i, 5] = irandom(2);
                break;
            default:
                inv[i, 0] = "Blad";
        }
    }
    else
    {
        inv[i, 1] = -1;
    }
}

for(i = 0; i &lt; 4; i++)
{
    for(j = 5; j &lt; 10; j++)
    {
        action[i, j] = -1;
    }
}

for(i = 0; i &lt; 10; i++)
{
    skill_mouseover[i] = false;
    skillbar_mouseover[i] = false;
}

for(i = 0; i &lt; 25; i++)
{
    skillbook_mouseover[i] = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(xp &gt;= xp_to_lvl)
{
    xp -= xp_to_lvl;
    lvl ++;
    stats_to_spend += 3;
    xp_to_lvl = 100 + ((lvl - 1) * 50);
}

/*
1 - miecz 2h
2 - topor 2h
3 - miecz 1h
4 - siekiera 1h
5 - sztylet 1h
6 - luk 2h
7 - kusza 2h
8 - pistolet 1h
9 - glawia 1h
*/

if(check_eq)
{
    switch(eq1[0, 1])
    {
        case 1:
            for(i = 0; i &lt; 5; i++)
            {
                action[0, i] = i + 1;
            }
            break;
        case 2:
            for(i = 0; i &lt; 5; i++)
            {
                action[0, i] = i + 1 + 5;
            }
            break;
        case 3:
            for(i = 0; i &lt; 3; i++)
            {
                action[0, i] = i + 1 + 10;
            }
            break;
        case 4:
            for(i = 0; i &lt; 3; i++)
            {
                action[0, i] = i + 1 + 15;
            }
            break;
        case 5:
            for(i = 0; i &lt; 3; i++)
            {
                action[0, i] = i + 1 + 20;
            }
            break;
        case 6:
            for(i = 0; i &lt; 5; i++)
            {
                action[0, i] = i + 1 + 25;
            }
            break;
        case 7:
            for(i = 0; i &lt; 5; i++)
            {
                action[0, i] = i + 1 + 30;
            }
            break;
        case 8:
            for(i = 0; i &lt; 3; i++)
            {
                action[0, i] = i + 1 + 35;
            }
            break;
        case 9:
            for(i = 0; i &lt; 3; i++)
            {
                action[0, i] = i + 1 + 40;
            }
            break;
        default:
            for(i = 0; i &lt; 3; i++)
            {
                action[0, i] = -1;
            }
    }
    
    if(eq1[0, 1] != 1 &amp;&amp; eq1[0, 1] != 2 &amp;&amp; eq1[0, 1] != 6 &amp;&amp; eq1[0, 1] != 7)
    {
        switch(eq1[1, 1])
        {
            case 3:
                action[0, 3] = i + 1 + 8;
                action[0, 4] = i + 1 + 9;
            case 4:
                action[0, 3] = i + 1 + 18;
                action[0, 4] = i + 1 + 19;
            case 5:
                action[0, 3] = i + 1 + 23;
                action[0, 4] = i + 1 + 24;
            case 8:
                action[0, 3] = i + 1 + 38;
                action[0, 4] = i + 1 + 39;
            default:
                action[0, 3] = -1;
                action[0, 4] = -1;
        }
    }
    
    switch(eq2[0, 1])
    {
        case 1:
            for(i = 0; i &lt; 5; i++)
            {
                action[1, i] = i + 1;
            }
            break;
        case 2:
            for(i = 0; i &lt; 5; i++)
            {
                action[1, i] = i + 1 + 5;
            }
            break;
        case 3:
            for(i = 0; i &lt; 3; i++)
            {
                action[1, i] = i + 1 + 10;
            }
            break;
        case 4:
            for(i = 0; i &lt; 3; i++)
            {
                action[1, i] = i + 1 + 15;
            }
            break;
        case 5:
            for(i = 0; i &lt; 3; i++)
            {
                action[1, i] = i + 1 + 20;
            }
            break;
        case 6:
            for(i = 0; i &lt; 5; i++)
            {
                action[1, i] = i + 1 + 25;
            }
            break;
        case 7:
            for(i = 0; i &lt; 5; i++)
            {
                action[1, i] = i + 1 + 30;
            }
            break;
        case 8:
            for(i = 0; i &lt; 3; i++)
            {
                action[1, i] = i + 1 + 35;
            }
            break;
        case 9:
            for(i = 0; i &lt; 3; i++)
            {
                action[1, i] = i + 1 + 40;
            }
            break;
        default:
            for(i = 0; i &lt; 3; i++)
            {
                action[1, i] = -1;
            }
    }
    
    if(eq2[0, 1] != 1 &amp;&amp; eq2[0, 1] != 2 &amp;&amp; eq2[0, 1] != 6 &amp;&amp; eq2[0, 1] != 7)
    {
        switch(eq2[1, 1])
        {
            case 3:
                action[1, 3] = i + 1 + 8;
                action[1, 4] = i + 1 + 9;
            case 4:
                action[1, 3] = i + 1 + 18;
                action[1, 4] = i + 1 + 19;
            case 5:
                action[1, 3] = i + 1 + 23;
                action[1, 4] = i + 1 + 24;
            case 8:
                action[1, 3] = i + 1 + 38;
                action[1, 4] = i + 1 + 39;
            default:
                action[1, 3] = -1;
                action[1, 4] = -1;
        }
    }
    
    switch(eq3[0, 1])
    {
        case 1:
            for(i = 0; i &lt; 5; i++)
            {
                action[2, i] = i + 1;
            }
            break;
        case 2:
            for(i = 0; i &lt; 5; i++)
            {
                action[2, i] = i + 1 + 5;
            }
            break;
        case 3:
            for(i = 0; i &lt; 3; i++)
            {
                action[2, i] = i + 1 + 10;
            }
            break;
        case 4:
            for(i = 0; i &lt; 3; i++)
            {
                action[2, i] = i + 1 + 15;
            }
            break;
        case 5:
            for(i = 0; i &lt; 3; i++)
            {
                action[2, i] = i + 1 + 20;
            }
            break;
        case 6:
            for(i = 0; i &lt; 5; i++)
            {
                action[2, i] = i + 1 + 25;
            }
            break;
        case 7:
            for(i = 0; i &lt; 5; i++)
            {
                action[2, i] = i + 1 + 30;
            }
            break;
        case 8:
            for(i = 0; i &lt; 3; i++)
            {
                action[2, i] = i + 1 + 35;
            }
            break;
        case 9:
            for(i = 0; i &lt; 3; i++)
            {
                action[2, i] = i + 1 + 40;
            }
            break;
        default:
            for(i = 0; i &lt; 3; i++)
            {
                action[2, i] = -1;
            }
    }
    
    if(eq3[0, 1] != 1 &amp;&amp; eq3[0, 1] != 2 &amp;&amp; eq3[0, 1] != 6 &amp;&amp; eq3[0, 1] != 7)
    {
        switch(eq3[1, 1])
        {
            case 3:
                action[2, 3] = i + 1 + 8;
                action[2, 4] = i + 1 + 9;
            case 4:
                action[2, 3] = i + 1 + 18;
                action[2, 4] = i + 1 + 19;
            case 5:
                action[2, 3] = i + 1 + 23;
                action[2, 4] = i + 1 + 24;
            case 8:
                action[2, 3] = i + 1 + 38;
                action[2, 4] = i + 1 + 39;
            default:
                action[2, 3] = -1;
                action[2, 4] = -1;
        }
    }
    
    switch(eq4[0, 1])
    {
        case 1:
            for(i = 0; i &lt; 5; i++)
            {
                action[3, i] = i + 1;
            }
            break;
        case 2:
            for(i = 0; i &lt; 5; i++)
            {
                action[3, i] = i + 1 + 5;
            }
            break;
        case 3:
            for(i = 0; i &lt; 3; i++)
            {
                action[3, i] = i + 1 + 10;
            }
            break;
        case 4:
            for(i = 0; i &lt; 3; i++)
            {
                action[3, i] = i + 1 + 15;
            }
            break;
        case 5:
            for(i = 0; i &lt; 3; i++)
            {
                action[3, i] = i + 1 + 20;
            }
            break;
        case 6:
            for(i = 0; i &lt; 5; i++)
            {
                action[3, i] = i + 1 + 25;
            }
            break;
        case 7:
            for(i = 0; i &lt; 5; i++)
            {
                action[3, i] = i + 1 + 30;
            }
            break;
        case 8:
            for(i = 0; i &lt; 3; i++)
            {
                action[3, i] = i + 1 + 35;
            }
            break;
        case 9:
            for(i = 0; i &lt; 3; i++)
            {
                action[3, i] = i + 1 + 40;
            }
            break;
        default:
            for(i = 0; i &lt; 3; i++)
            {
                action[3, i] = -1;
            }
    }
    
    if(eq4[0, 1] != 1 &amp;&amp; eq4[0, 1] != 2 &amp;&amp; eq4[0, 1] != 6 &amp;&amp; eq4[0, 1] != 7)
    {
        switch(eq4[1, 1])
        {
            case 3:
                action[3, 3] = i + 1 + 8;
                action[3, 4] = i + 1 + 9;
            case 4:
                action[3, 3] = i + 1 + 18;
                action[3, 4] = i + 1 + 19;
            case 5:
                action[3, 3] = i + 1 + 23;
                action[3, 4] = i + 1 + 24;
            case 8:
                action[3, 3] = i + 1 + 38;
                action[3, 4] = i + 1 + 39;
            default:
                action[3, 3] = -1;
                action[3, 4] = -1;
        }
    }
    
    //liczenie statystyk
    /*
    0 - atak 1 - 3
    1 - atak 4 - 5
    2 - obrazenia krytyczne
    3 - obrazenia DoT 1 - 3
    4 - obrazenia DoT 4 - 5
    5 - zywotnosc +maxHP
    6 - zrecznosc +maxAP
    7 - pancerz
    8 - ochrona przed DoT
    9 - inicjatywa
    
    1 pkt = 10%
    */
    
    if(eq1[0, 1] != -1) hero[0, 0] = round(eq1[0, 2] * (1 + heroBase[0, 1]/10));
    else hero[0, 0] = 0;
    if(eq1[1, 1] != -1) hero[0, 1] = round(eq1[1, 2] * (1 + heroBase[0, 1]/10));
    else hero[0, 1] = 0;
    hero[0, 2] = round(1.5 * (1 + heroBase[0, 2]/10));
    if(eq1[0, 1] != -1) hero[0, 3] = round(eq1[0, 3] * (1 + heroBase[0, 3]/10));
    else hero[0, 3] = 0;
    if(eq1[1, 1] != -1) hero[0, 4] = round(eq1[1, 3] * (1 + heroBase[0, 3]/10));
    else hero[0, 4] = 0;
    hero[0, 5] = round(1000 * (1 + heroBase[0, 4]/10));
    (Ctrl.h1).maxhp = hero[0, 5];
    hero[0, 6] = round(100 * (1 + heroBase[0, 5]/10));
    (Ctrl.h1).maxap = hero[0, 6];
    (Ctrl.h1).hp = hero[0, 5];
    (Ctrl.h1).ap = hero[0, 6];
    hero[0, 7] = 0;
    if(eq1[2, 1] != -1) hero[0, 7] += eq1[2, 2];
    if(eq1[3, 1] != -1) hero[0, 7] += eq1[3, 2];
    if(eq1[4, 1] != -1) hero[0, 7] += eq1[4, 2];
    if(eq1[5, 1] != -1) hero[0, 7] += eq1[5, 2];
    if(eq1[6, 1] != -1) hero[0, 7] += eq1[6, 2];
    hero[0, 8] = 0;
    if(eq1[2, 1] != -1) hero[0, 8] += eq1[2, 3];
    if(eq1[3, 1] != -1) hero[0, 8] += eq1[3, 3];
    if(eq1[4, 1] != -1) hero[0, 8] += eq1[4, 3];
    if(eq1[5, 1] != -1) hero[0, 8] += eq1[5, 3];
    if(eq1[6, 1] != -1) hero[0, 8] += eq1[6, 3];
    hero[0, 9] = heroBase[0, 6];
    
    if(eq2[0, 1] != -1) hero[1, 0] = round(eq2[0, 2] * (1 + heroBase[1, 1]/10));
    else hero[1, 0] = 0;
    if(eq2[1, 1] != -1) hero[1, 1] = round(eq2[1, 2] * (1 + heroBase[1, 1]/10));
    else hero[1, 1] = 0;
    hero[1, 2] = round(1.5 * (1 + heroBase[1, 2]/10));
    if(eq2[0, 1] != -1) hero[1, 3] = round(eq2[0, 3] * (1 + heroBase[1, 3]/10));
    else hero[1, 3] = 0;
    if(eq2[1, 1] != -1) hero[1, 4] = round(eq2[1, 3] * (1 + heroBase[1, 3]/10));
    else hero[1, 4] = 0;
    hero[1, 5] = round(1000 * (1 + heroBase[1, 4]/10));
    (Ctrl.h2).maxhp = hero[1, 5];
    hero[1, 6] = round(100 * (1 + heroBase[1, 5]/10));
    (Ctrl.h2).maxap = hero[1, 6];
    (Ctrl.h2).hp = hero[1, 5];
    (Ctrl.h2).ap = hero[1, 6];
    hero[1, 7] = 0;
    if(eq2[2, 1] != -1) hero[1, 7] += eq2[2, 2];
    if(eq2[3, 1] != -1) hero[1, 7] += eq2[3, 2];
    if(eq2[4, 1] != -1) hero[1, 7] += eq2[4, 2];
    if(eq2[5, 1] != -1) hero[1, 7] += eq2[5, 2];
    if(eq2[6, 1] != -1) hero[1, 7] += eq2[6, 2];
    hero[1, 8] = 0;
    if(eq2[2, 1] != -1) hero[1, 8] += eq2[2, 3];
    if(eq2[3, 1] != -1) hero[1, 8] += eq2[3, 3];
    if(eq2[4, 1] != -1) hero[1, 8] += eq2[4, 3];
    if(eq2[5, 1] != -1) hero[1, 8] += eq2[5, 3];
    if(eq2[6, 1] != -1) hero[1, 8] += eq2[6, 3];
    hero[1, 9] = heroBase[1, 6];
    
    if(eq3[0, 1] != -1) hero[2, 0] = round(eq3[0, 2] * (1 + heroBase[2, 1]/10));
    else hero[2, 0] = 0;
    if(eq3[1, 1] != -1) hero[2, 1] = round(eq3[1, 2] * (1 + heroBase[2, 1]/10));
    else hero[2, 1] = 0;
    hero[2, 2] = round(1.5 * (1 + heroBase[2, 2]/10));
    if(eq3[0, 1] != -1) hero[2, 3] = round(eq3[0, 3] * (1 + heroBase[2, 3]/10));
    else hero[2, 3] = 0;
    if(eq3[1, 1] != -1) hero[2, 4] = round(eq3[1, 3] * (1 + heroBase[2, 3]/10));
    else hero[2, 4] = 0;
    hero[2, 5] = round(1000 * (1 + heroBase[2, 4]/10));
    (Ctrl.h3).maxhp = hero[2, 5];
    hero[2, 6] = round(100 * (1 + heroBase[2, 5]/10));
    (Ctrl.h3).maxap = hero[2, 6];
    (Ctrl.h3).hp = hero[2, 5];
    (Ctrl.h3).ap = hero[2, 6];
    hero[2, 7] = 0;
    if(eq3[2, 1] != -1) hero[2, 7] += eq3[2, 2];
    if(eq3[3, 1] != -1) hero[2, 7] += eq3[3, 2];
    if(eq3[4, 1] != -1) hero[2, 7] += eq3[4, 2];
    if(eq3[5, 1] != -1) hero[2, 7] += eq3[5, 2];
    if(eq3[6, 1] != -1) hero[2, 7] += eq3[6, 2];
    hero[2, 8] = 0;
    if(eq3[2, 1] != -1) hero[2, 8] += eq3[2, 3];
    if(eq3[3, 1] != -1) hero[2, 8] += eq3[3, 3];
    if(eq3[4, 1] != -1) hero[2, 8] += eq3[4, 3];
    if(eq3[5, 1] != -1) hero[2, 8] += eq3[5, 3];
    if(eq3[6, 1] != -1) hero[2, 8] += eq3[6, 3];
    hero[2, 9] = heroBase[2, 6];
    
    if(eq4[0, 1] != -1) hero[3, 0] = round(eq4[0, 2] * (1 + heroBase[3, 1]/10));
    else hero[3, 0] = 0;
    if(eq4[1, 1] != -1) hero[3, 1] = round(eq4[1, 2] * (1 + heroBase[3, 1]/10));
    else hero[3, 1] = 0;
    hero[3, 2] = round(1.5 * (1 + heroBase[3, 2]/10));
    if(eq4[0, 1] != -1) hero[3, 3] = round(eq4[0, 3] * (1 + heroBase[3, 3]/10));
    else hero[3, 3] = 0;
    if(eq4[1, 1] != -1) hero[3, 4] = round(eq4[1, 3] * (1 + heroBase[3, 3]/10));
    else hero[3, 4] = 0;
    hero[3, 5] = round(1000 * (1 + heroBase[3, 4]/10));
    (Ctrl.h4).maxhp = hero[3, 5];
    hero[3, 6] = round(100 * (1 + heroBase[3, 5]/10));
    (Ctrl.h4).maxap = hero[3, 6];
    (Ctrl.h4).hp = hero[3, 5];
    (Ctrl.h4).ap = hero[3, 6];
    hero[3, 7] = 0;
    if(eq4[2, 1] != -1) hero[3, 7] += eq4[2, 2];
    if(eq4[3, 1] != -1) hero[3, 7] += eq4[3, 2];
    if(eq4[4, 1] != -1) hero[3, 7] += eq4[4, 2];
    if(eq4[5, 1] != -1) hero[3, 7] += eq4[5, 2];
    if(eq4[6, 1] != -1) hero[3, 7] += eq4[6, 2];
    hero[3, 8] = 0;
    if(eq4[2, 1] != -1) hero[3, 8] += eq4[2, 3];
    if(eq4[3, 1] != -1) hero[3, 8] += eq4[3, 3];
    if(eq4[4, 1] != -1) hero[3, 8] += eq4[4, 3];
    if(eq4[5, 1] != -1) hero[3, 8] += eq4[5, 3];
    if(eq4[6, 1] != -1) hero[3, 8] += eq4[6, 3];
    hero[3, 9] = heroBase[3, 6];
    
    check_eq = false;
}

if(show_inv)
{
    if(Ctrl.mode == 1) show_inv = false;
    else
    {
        for(i = 0; i &lt; 24; i ++)
        {
            if(mouse_x &gt;= view_xview + (view_wview / 2 - 270 + 68 * (i % 8)) &amp;&amp; mouse_x &lt;= view_xview + (view_wview / 2 - 270 + 68 * (i % 8)) + 64 &amp;&amp; mouse_y &gt;= view_yview + (view_hview - 216 - 24 + 68 * (floor(i / 8))) &amp;&amp; mouse_y &lt;= view_yview + (view_hview - 216 - 24 + 68 * (floor(i / 8))) + 64)
            {
                inv_mouseover[i] = true;
            }
            else inv_mouseover[i] = false;
        }
        
        if(mouse_y &gt;= view_yview + 68 &amp;&amp; mouse_y &lt;= view_yview + 132 &amp;&amp; mouse_x &gt;= view_wview / 2 + 134 &amp;&amp; mouse_x &lt;= view_wview / 2 + 198) eq_mouseover[2] = true;
        else eq_mouseover[2] = false;
        
        if(mouse_y &gt;= view_yview + 68 + 72 &amp;&amp; mouse_y &lt;= view_yview + 132 + 72)
        {
            if(mouse_x &gt;= view_wview / 2 + 134 - 72 &amp;&amp; mouse_x &lt;= view_wview / 2 + 198 - 72) eq_mouseover[0] = true;
            else eq_mouseover[0] = false;
            
            if(mouse_x &gt;= view_wview / 2 + 134 &amp;&amp; mouse_x &lt;= view_wview / 2 + 198) eq_mouseover[3] = true;
            else eq_mouseover[3] = false;
            
            if(mouse_x &gt;= view_wview / 2 + 134 + 72 &amp;&amp; mouse_x &lt;= view_wview / 2 + 198 + 72) eq_mouseover[1] = true;
            else eq_mouseover[1] = false;
        }
        else
        {
            eq_mouseover[0] = false;
            eq_mouseover[1] = false;
            eq_mouseover[3] = false;
        }
        
        if(mouse_y &gt;= view_yview + 68 + 144 &amp;&amp; mouse_y &lt;= view_yview + 132 + 144)
        {
            if(mouse_x &gt;= view_wview / 2 + 134 - 72 &amp;&amp; mouse_x &lt;= view_wview / 2 + 198 - 72) eq_mouseover[5] = true;
            else eq_mouseover[5] = false;
            
            if(mouse_x &gt;= view_wview / 2 + 134 &amp;&amp; mouse_x &lt;= view_wview / 2 + 198) eq_mouseover[4] = true;
            else eq_mouseover[4] = false;
            
            if(mouse_x &gt;= view_wview / 2 + 134 + 72 &amp;&amp; mouse_x &lt;= view_wview / 2 + 198 + 72) eq_mouseover[6] = true;
            else eq_mouseover[6] = false;
        }
        else
        {
            eq_mouseover[4] = false;
            eq_mouseover[5] = false;
            eq_mouseover[6] = false;
        }
        
        if(mouse_y &gt;= view_yview + 24 &amp;&amp; mouse_y &lt;= view_yview + 48)
        {
            if(mouse_x &gt;= view_xview + view_wview / 2 - 270 &amp;&amp; mouse_x &lt;= view_xview + view_wview / 2 - 246) prev_eq_mouseover = true;
            else prev_eq_mouseover = false;
            
            if(mouse_x &gt;= view_xview + view_wview / 2 + 246 &amp;&amp; mouse_x &lt;= view_xview + view_wview / 2 + 270) next_eq_mouseover = true;
            else next_eq_mouseover = false;
        }
        else
        {
            prev_eq_mouseover = false;
            next_eq_mouseover = false;
        }
        
        if(mouse_check_button_pressed(mb_left))
        {
            if(next_eq_mouseover)
            {
                current_eq ++;
                if(current_eq &gt; 3) current_eq = 0;
            }
            else if(prev_eq_mouseover)
            {
                current_eq --;
                if(current_eq &lt; 0) current_eq = 3;
            }
        }
        
        if(mouse_check_button_released(mb_left))
        {
            for(i = 0; i &lt; 7; i++)
            {
                if(eq_mouseover[i])
                {
                    if(grabbed_item[1] != -1)
                    {
                        if(current_eq == 0)
                        {
                            inv_temp[0] = eq1[i, 0];
                            inv_temp[1] = eq1[i, 1];
                            inv_temp[2] = eq1[i, 2];
                            inv_temp[3] = eq1[i, 3];
                            inv_temp[4] = eq1[i, 4];
                            inv_temp[5] = eq1[i, 5];
                            
                            eq1[i, 0] = grabbed_item[0];
                            eq1[i, 1] = grabbed_item[1];
                            eq1[i, 2] = grabbed_item[2];
                            eq1[i, 3] = grabbed_item[3];
                            eq1[i, 4] = grabbed_item[4];
                            eq1[i, 5] = grabbed_item[5];
                        }
                        if(current_eq == 1)
                        {
                            inv_temp[0] = eq2[i, 0];
                            inv_temp[1] = eq2[i, 1];
                            inv_temp[2] = eq2[i, 2];
                            inv_temp[3] = eq2[i, 3];
                            inv_temp[4] = eq2[i, 4];
                            inv_temp[5] = eq2[i, 5];
                            
                            eq2[i, 0] = grabbed_item[0];
                            eq2[i, 1] = grabbed_item[1];
                            eq2[i, 2] = grabbed_item[2];
                            eq2[i, 3] = grabbed_item[3];
                            eq2[i, 4] = grabbed_item[4];
                            eq2[i, 5] = grabbed_item[5];
                        }
                        if(current_eq == 2)
                        {
                            inv_temp[0] = eq3[i, 0];
                            inv_temp[1] = eq3[i, 1];
                            inv_temp[2] = eq3[i, 2];
                            inv_temp[3] = eq3[i, 3];
                            inv_temp[4] = eq3[i, 4];
                            inv_temp[5] = eq3[i, 5];
                            
                            eq3[i, 0] = grabbed_item[0];
                            eq3[i, 1] = grabbed_item[1];
                            eq3[i, 2] = grabbed_item[2];
                            eq3[i, 3] = grabbed_item[3];
                            eq3[i, 4] = grabbed_item[4];
                            eq3[i, 5] = grabbed_item[5];
                        }
                        if(current_eq == 3)
                        {
                            inv_temp[0] = eq4[i, 0];
                            inv_temp[1] = eq4[i, 1];
                            inv_temp[2] = eq4[i, 2];
                            inv_temp[3] = eq4[i, 3];
                            inv_temp[4] = eq4[i, 4];
                            inv_temp[5] = eq4[i, 5];
                            
                            eq4[i, 0] = grabbed_item[0];
                            eq4[i, 1] = grabbed_item[1];
                            eq4[i, 2] = grabbed_item[2];
                            eq4[i, 3] = grabbed_item[3];
                            eq4[i, 4] = grabbed_item[4];
                            eq4[i, 5] = grabbed_item[5];
                        }
                        grabbed_item[0] = inv_temp[0];
                        grabbed_item[1] = inv_temp[1];
                        grabbed_item[2] = inv_temp[2];
                        grabbed_item[3] = inv_temp[3];
                        grabbed_item[4] = inv_temp[4];
                        grabbed_item[5] = inv_temp[5];
                    }
                    else
                    {
                        if(current_eq == 0)
                        {
                            grabbed_item[0] = eq1[i, 0];
                            grabbed_item[1] = eq1[i, 1];
                            grabbed_item[2] = eq1[i, 2];
                            grabbed_item[3] = eq1[i, 3];
                            grabbed_item[4] = eq1[i, 4];
                            grabbed_item[5] = eq1[i, 5];
                            
                            eq1[i, 0] = 0;
                            eq1[i, 1] = -1;
                            eq1[i, 2] = 0;
                            eq1[i, 3] = 0;
                            eq1[i, 4] = 0;
                            eq1[i, 5] = 0;
                        }
                        if(current_eq == 1)
                        {
                            grabbed_item[0] = eq2[i, 0];
                            grabbed_item[1] = eq2[i, 1];
                            grabbed_item[2] = eq2[i, 2];
                            grabbed_item[3] = eq2[i, 3];
                            grabbed_item[4] = eq2[i, 4];
                            grabbed_item[5] = eq2[i, 5];
                            
                            eq2[i, 0] = 0;
                            eq2[i, 1] = -1;
                            eq2[i, 2] = 0;
                            eq2[i, 3] = 0;
                            eq2[i, 4] = 0;
                            eq2[i, 5] = 0;
                        }
                        if(current_eq == 2)
                        {
                            grabbed_item[0] = eq3[i, 0];
                            grabbed_item[1] = eq3[i, 1];
                            grabbed_item[2] = eq3[i, 2];
                            grabbed_item[3] = eq3[i, 3];
                            grabbed_item[4] = eq3[i, 4];
                            grabbed_item[5] = eq3[i, 5];
                            
                            eq3[i, 0] = 0;
                            eq3[i, 1] = -1;
                            eq3[i, 2] = 0;
                            eq3[i, 3] = 0;
                            eq3[i, 4] = 0;
                            eq3[i, 5] = 0;
                        }
                        if(current_eq == 3)
                        {
                            grabbed_item[0] = eq4[i, 0];
                            grabbed_item[1] = eq4[i, 1];
                            grabbed_item[2] = eq4[i, 2];
                            grabbed_item[3] = eq4[i, 3];
                            grabbed_item[4] = eq4[i, 4];
                            grabbed_item[5] = eq4[i, 5];
                            
                            eq4[i, 0] = 0;
                            eq4[i, 1] = -1;
                            eq4[i, 2] = 0;
                            eq4[i, 3] = 0;
                            eq4[i, 4] = 0;
                            eq4[i, 5] = 0;
                        }
                    }
                }
                else if!(mouse_x &gt;= view_xview + view_wview / 2 - 278 &amp;&amp; mouse_x &lt;= view_xview + view_wview /2 + 278)
                {
                    if(grabbed_item[1] != -1)
                    {
                        //drop
                        //grabbed_item = 0;
                    }
                }
            }
        
            for(i = 0; i &lt; 24; i ++)
            {
                if(inv_mouseover[i])
                {
                    if(grabbed_item[1] != -1)
                    {
                        if(inv[i, 1] != -1)
                        {
                            inv_temp[0] = inv[i, 0];
                            inv_temp[1] = inv[i, 1];
                            inv_temp[2] = inv[i, 2];
                            inv_temp[3] = inv[i, 3];
                            inv_temp[4] = inv[i, 4];
                            inv_temp[5] = inv[i, 5];
                        
                            inv[i, 0] = grabbed_item[0];
                            inv[i, 1] = grabbed_item[1];
                            inv[i, 2] = grabbed_item[2];
                            inv[i, 3] = grabbed_item[3];
                            inv[i, 4] = grabbed_item[4];
                            inv[i, 5] = grabbed_item[5];
                            
                            grabbed_item[0] = inv_temp[0];
                            grabbed_item[1] = inv_temp[1];
                            grabbed_item[2] = inv_temp[2];
                            grabbed_item[3] = inv_temp[3];
                            grabbed_item[4] = inv_temp[4];
                            grabbed_item[5] = inv_temp[5];
                        }
                        else
                        {
                            inv[i, 0] = grabbed_item[0];
                            inv[i, 1] = grabbed_item[1];
                            inv[i, 2] = grabbed_item[2];
                            inv[i, 3] = grabbed_item[3];
                            inv[i, 4] = grabbed_item[4];
                            inv[i, 5] = grabbed_item[5];
                            
                            grabbed_item[0] = 0;
                            grabbed_item[1] = -1;
                            grabbed_item[2] = 0;
                            grabbed_item[3] = 0;
                            grabbed_item[4] = 0;
                            grabbed_item[5] = 0;
                        }
                    }
                    else
                    {
                        if(inv[i, 1] != -1)
                        {
                            grabbed_item[0] = inv[i, 0];
                            grabbed_item[1] = inv[i, 1];
                            grabbed_item[2] = inv[i, 2];
                            grabbed_item[3] = inv[i, 3];
                            grabbed_item[4] = inv[i, 4];
                            grabbed_item[5] = inv[i, 5];
                            
                            inv[i, 0] = 0;
                            inv[i, 1] = -1;
                            inv[i, 2] = 0;
                            inv[i, 3] = 0;
                            inv[i, 4] = 0;
                            inv[i, 5] = 0;
                        }
                    }
                }
                else if!(mouse_x &gt;= view_xview + view_wview / 2 - 278 &amp;&amp; mouse_x &lt;= view_xview + view_wview /2 + 278)
                {
                    if(grabbed_item[1] != -1)
                    {
                        //drop
                        //grabbed_item = 0;
                    }
                }
            }
            check_eq = true;
        }
    }
}
else grabbed_item[1] = -1;

if(show_char)
{
    if(Ctrl.mode == 1) show_char = false;
    else
    {
        if(mouse_y &gt;= view_yview + 24 &amp;&amp; mouse_y &lt;= view_yview + 48)
        {
            if(mouse_x &gt;= view_xview + view_wview / 2 - 270 &amp;&amp; mouse_x &lt;= view_xview + view_wview / 2 - 246) prev_eq_mouseover = true;
            else prev_eq_mouseover = false;
            
            if(mouse_x &gt;= view_xview + view_wview / 2 + 246 &amp;&amp; mouse_x &lt;= view_xview + view_wview / 2 + 270) next_eq_mouseover = true;
            else next_eq_mouseover = false;
        }
        else
        {
            prev_eq_mouseover = false;
            next_eq_mouseover = false;
        }
        
        if(mouse_x &gt;= view_xview + view_wview / 2 + 60 &amp;&amp; mouse_x &lt;= view_xview + view_wview / 2 + 84)
        {
            if(mouse_y &gt;= view_yview + 85 &amp;&amp; mouse_y &lt;= view_yview + 85 + 24) stat_mouseover[0] = true;
            else stat_mouseover[0] = false;
            if(mouse_y &gt;= view_yview + 115 &amp;&amp; mouse_y &lt;= view_yview + 115 + 24) stat_mouseover[1] = true;
            else stat_mouseover[1] = false;
            if(mouse_y &gt;= view_yview + 145 &amp;&amp; mouse_y &lt;= view_yview + 145 + 24) stat_mouseover[2] = true;
            else stat_mouseover[2] = false;
            if(mouse_y &gt;= view_yview + 175 &amp;&amp; mouse_y &lt;= view_yview + 175 + 24) stat_mouseover[3] = true;
            else stat_mouseover[3] = false;
            if(mouse_y &gt;= view_yview + 205 &amp;&amp; mouse_y &lt;= view_yview + 205 + 24) stat_mouseover[4] = true;
            else stat_mouseover[4] = false;
            if(mouse_y &gt;= view_yview + 235 &amp;&amp; mouse_y &lt;= view_yview + 235 + 24) stat_mouseover[5] = true;
            else stat_mouseover[5] = false;
        }
        else
        {
            stat_mouseover[0] = false;
            stat_mouseover[1] = false;
            stat_mouseover[2] = false;
            stat_mouseover[3] = false;
            stat_mouseover[4] = false;
            stat_mouseover[5] = false;
        }
        
        if(mouse_check_button_pressed(mb_left))
        {
            if(next_eq_mouseover)
            {
                current_eq ++;
                if(current_eq &gt; 3) current_eq = 0;
            }
            else if(prev_eq_mouseover)
            {
                current_eq --;
                if(current_eq &lt; 0) current_eq = 3;
            }
            
            if(stats_to_spend &gt; 0)
            {
                for(i = 0; i &lt; 6; i ++)
                {
                    if(stat_mouseover[i]) heroBase[current_eq, i + 1] ++;
                }
            }
        }
    }
    
    if(mouse_y &gt;= view_yview + 292 &amp;&amp; mouse_y &lt;= view_yview + 292 + 48)
    {
        for(i = 0; i &lt; 10; i++)
        {
            if(mouse_x &gt;= view_xview + view_wview / 2 - 270 + i*(60/9) + i*48 &amp;&amp; mouse_x &lt;= view_xview + view_wview / 2 - 270 + i*(60/9) + i*48 + 48) skill_mouseover[i] = true;
            else skill_mouseover[i] = false;
        }
    }
    else
    {
        for(i = 0; i &lt; 10; i++)
        {
            skill_mouseover[i] = false;
        }
    }
    
    for(i = 0; i &lt; 5; i++)
    {
        if(mouse_y &gt;= view_yview + view_hview - 288 - 24 + i*8 + i*48 &amp;&amp; mouse_y &lt;= view_yview + view_hview - 288 - 24 + i*8 + i*48 + 48)
        {
            for(j = 0; j &lt; 5; j++)
            {
                if(mouse_x &gt;= view_xview + view_wview / 2 - 144 + (j+1)*8 + j*48 &amp;&amp; mouse_x &lt;= view_xview + view_wview / 2 - 144 + (j+1) * 8 + j*48 + 48) skillbook_mouseover[i*5+j] = true;
                else skillbook_mouseover[i*5+j] = false;
            }
        }
        else
        {
            for(j = 0; j &lt; 5; j++)
            {
                skillbook_mouseover[i*5+j] = false;
            }
        }
    }
    
    if(mouse_check_button_released(mb_left))
        {
            for(i = 5; i &lt; 10; i++)
            {
                if(skill_mouseover[i])
                {
                    if(grabbed_skill)
                    {
                        skill_temp = action[current_eq, i];
                        action[current_eq, i] = grabbed_skill;
                        grabbed_skill = skill_temp;
                    }
                    else
                    {
                        grabbed_skill = action[current_eq, i];
                        action[current_eq, i] = 0;
                    }
                }
                else
                {
                    //grabbed_skill = 0;
                }
            }
        
            for(i = 0; i &lt; 25; i ++)
            {
                if(skillbook_mouseover[i])
                {
                    grabbed_skill = 44 + i;
                }
            }
        }
    
}
else grabbed_skill = 0;

if(show_quests)
{
    if(mouse_x &gt;= view_xview + view_wview - 100 &amp;&amp; mouse_x &lt;= view_xview + view_wview - 84)
    {
        for(i = 0; i &lt; quests; i++)
        {
            if(mouse_y &gt;= view_yview + 136 + (i * 36) &amp;&amp; mouse_y &lt;= view_yview + 152 + (i * 36)) quest_tracking_mouseover[i] = true;
            else quest_tracking_mouseover[i] = false;
        }
    }
    else
    {
        for(i = 0; i &lt; quests; i++)
        {
            quest_tracking_mouseover[i] = false;
        }
    }
    
    if(mouse_check_button_pressed(mb_left))
    {
        for(i = 0; i &lt; quests; i++)
        {
            if(quest_tracking_mouseover[i])
            {
                quest_tracking[i] = !quest_tracking[i];
            }
        }
    }
}

if(Ctrl.mode == 1)
{
    if(mouse_y &gt;= view_yview + view_hview - 56 &amp;&amp; mouse_y &lt;= view_yview + view_hview - 8)
    {
        for(i = 0; i &lt; 10; i++)
        {
            if(mouse_x &gt;= view_xview + view_wview / 2 - 258 + i*4 + i*48 &amp;&amp; mouse_x &lt;= view_xview + view_wview / 2 - 258 + i*4 + (i+1)*48) skillbar_mouseover[i] = true;
            else skillbar_mouseover[i] = false;
        }
    }
    else
    {
        for(i = 0; i &lt; 10; i++)
        {
            skillbar_mouseover[i] = false;
        }
    }
    
    if(mouse_check_button_pressed(mb_left))
    {
        for(i = 0; i &lt; 10; i++)
        {
            if(skillbar_mouseover[i]) Ctrl.actionid = i + 1;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="75">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(show_inv)
{
    draw_set_alpha(0.5);
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 - 278, view_hview - 216 - 32, view_wview /2 + 278, view_hview - 32, false);
    draw_rectangle(view_wview / 2 + 136, view_hview - 30, view_wview / 2 + 278, view_hview - 12, false);
    draw_set_alpha(1);
    draw_set_colour(c_white);
    draw_text(view_wview / 2 + 140, view_hview - 28, "Zloto: " + string(gold));
    draw_set_colour(c_black);
    
    for(i = 0; i &lt; 24; i ++)
    {
        draw_set_colour(c_black);
        draw_rectangle(view_wview / 2 - 270 + 68 * (i % 8), view_hview - 216 - 24 + 68 * (floor(i / 8)), view_wview / 2 - 270 + 68 * (i % 8) + 64, view_hview - 216 - 24 + 68 * (floor(i / 8)) + 64, false);
        draw_set_colour($808080);
        draw_rectangle(view_wview / 2 - 270 + 68 * (i % 8), view_hview - 216 - 24 + 68 * (floor(i / 8)), view_wview / 2 - 270 + 68 * (i % 8) + 64, view_hview - 216 - 24 + 68 * (floor(i / 8)) + 64, true);
    
        if(inv[i, 1] == 0) draw_sprite(sprItemIcon, 0, view_wview / 2 - 270 + 68 * (i % 8), view_hview - 216 - 24 + 68 * (floor(i / 8)));
        if(inv[i, 1] &gt;= 1 &amp;&amp; inv[i, 1] &lt;= 9) draw_sprite(sprWeaponIcon, -1 + inv[i, 1], view_wview / 2 - 270 + 68 * (i % 8), view_hview - 216 - 24 + 68 * (floor(i / 8)));
        if(inv[i, 1] &gt;= 21 &amp;&amp; inv[i, 1] &lt;= 25) draw_sprite(sprArmorIcon, -21 + inv[i, 1], view_wview / 2 - 270 + 68 * (i % 8), view_hview - 216 - 24 + 68 * (floor(i / 8)));
    }
    
    draw_set_colour(c_black);
    
    draw_set_alpha(0.5);
    draw_rectangle(view_wview / 2 - 278, 16, view_wview / 2 + 278, 56, false);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_colour(view_wview / 2, 36, string(heroBase[current_eq, 0]), c_white, c_white, c_white, c_white, 1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_rectangle(view_wview / 2 - 278, 60, view_wview / 2 + 278, 460, false);
    draw_set_alpha(1);
    draw_set_colour($808080);
    
    if(prev_eq_mouseover)
    {
        draw_set_colour($BBBBBB);
        draw_rectangle(view_wview / 2 - 270, 24, view_wview / 2 - 246, 48, false);
        draw_set_colour($808080);
    }
    else draw_rectangle(view_wview / 2 - 270, 24, view_wview / 2 - 246, 48, false);
    draw_sprite(sprArrowSmall, 2, view_wview / 2 - 270, 24);
    
    if(next_eq_mouseover)
    {
        draw_set_colour($BBBBBB);
        draw_rectangle(view_wview / 2 + 246, 24, view_wview / 2 + 270, 48, false);
        draw_set_colour($808080);
    }
    else draw_rectangle(view_wview / 2 + 246, 24, view_wview / 2 + 270, 48, false);
    draw_sprite(sprArrowSmall, 0, view_wview / 2 + 246, 24);
    
    /*
                                view_yview + 60
    
    
    view_wview / 2 - 278                                view_wview / 2 + 278
    
    
                                view_yview + 460
    */
    
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 + 134, 68, view_wview / 2 + 134 + 64, 68 + 64, false);
    draw_set_colour($808080);
    draw_rectangle(view_wview / 2 + 134, 68, view_wview / 2 + 134 + 64, 68 + 64, true);
    
    if(current_eq == 0)
    {
        if(eq1[2, 1] != -1) draw_sprite(sprArmorIcon, 0, view_wview / 2 + 134, 68);
    }
    if(current_eq == 1)
    {
        if(eq2[2, 1] != -1) draw_sprite(sprArmorIcon, 0, view_wview / 2 + 134, 68);
    }
    if(current_eq == 2)
    {
        if(eq3[2, 1] != -1) draw_sprite(sprArmorIcon, 0, view_wview / 2 + 134, 68);
    }
    if(current_eq == 3)
    {
        if(eq4[2, 1] != -1) draw_sprite(sprArmorIcon, 0, view_wview / 2 + 134, 68);
    }
    
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 + 134 - 72, 68 + 72, view_wview / 2 + 134 - 72 + 64, 68 + 72 + 64, false);
    draw_set_colour($808080);
    draw_rectangle(view_wview / 2 + 134 - 72, 68 + 72, view_wview / 2 + 134 - 72 + 64, 68 + 72 + 64, true);
    
    if(current_eq == 0)
    {
        if(eq1[0, 1] != -1) draw_sprite(sprWeaponIcon, 0, view_wview / 2 + 134 - 72, 68 + 72);
    }
    if(current_eq == 1)
    {
        if(eq2[0, 1] != -1) draw_sprite(sprWeaponIcon, 0, view_wview / 2 + 134 - 72, 68 + 72);
    }
    if(current_eq == 2)
    {
        if(eq3[0, 1] != -1) draw_sprite(sprWeaponIcon, 0, view_wview / 2 + 134 - 72, 68 + 72);
    }
    if(current_eq == 3)
    {
        if(eq4[0, 1] != -1) draw_sprite(sprWeaponIcon, 0, view_wview / 2 + 134 - 72, 68 + 72);
    }
    
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 + 134, 68 + 72, view_wview / 2 + 134 + 64, 68 + 72 + 64, false);
    draw_set_colour($808080);
    draw_rectangle(view_wview / 2 + 134, 68 + 72, view_wview / 2 + 134 + 64, 68 + 72 + 64, true);
    
    if(current_eq == 0)
    {
        if(eq1[3, 1] != -1) draw_sprite(sprArmorIcon, 1, view_wview / 2 + 134, 68 + 72);
    }
    if(current_eq == 1)
    {
        if(eq2[3, 1] != -1) draw_sprite(sprArmorIcon, 1, view_wview / 2 + 134, 68 + 72);
    }
    if(current_eq == 2)
    {
        if(eq3[3, 1] != -1) draw_sprite(sprArmorIcon, 1, view_wview / 2 + 134, 68 + 72);
    }
    if(current_eq == 3)
    {
        if(eq4[3, 1] != -1) draw_sprite(sprArmorIcon, 1, view_wview / 2 + 134, 68 + 72);
    }
    
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 + 134 + 72, 68 + 72, view_wview / 2 + 134 + 72 + 64, 68 + 72 + 64, false);
    draw_set_colour($808080);
    draw_rectangle(view_wview / 2 + 134 + 72, 68 + 72, view_wview / 2 + 134 + 72 + 64, 68 + 72 + 64, true);
    
    if(current_eq == 0)
    {
        if(eq1[1, 1] != -1) draw_sprite(sprWeaponIcon, 0, view_wview / 2 + 134 + 72, 68 + 72);
    }
    if(current_eq == 1)
    {
        if(eq2[1, 1] != -1) draw_sprite(sprWeaponIcon, 0, view_wview / 2 + 134 + 72, 68 + 72);
    }
    if(current_eq == 2)
    {
        if(eq3[1, 1] != -1) draw_sprite(sprWeaponIcon, 0, view_wview / 2 + 134 + 72, 68 + 72);
    }
    if(current_eq == 3)
    {
        if(eq4[1, 1] != -1) draw_sprite(sprWeaponIcon, 0, view_wview / 2 + 134 + 72, 68 + 72);
    }
    
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 + 134 - 72, 68 + 144, view_wview / 2 + 134 - 72 + 64, 68 + 144 + 64, false);
    draw_set_colour($808080);
    draw_rectangle(view_wview / 2 + 134 - 72, 68 + 144, view_wview / 2 + 134 - 72 + 64, 68 + 144 + 64, true);
    
    if(current_eq == 0)
    {
        if(eq1[5, 1] != -1) draw_sprite(sprArmorIcon, 3, view_wview / 2 + 134 - 72, 68 + 144);
    }
    if(current_eq == 1)
    {
        if(eq2[5, 1] != -1) draw_sprite(sprArmorIcon, 3, view_wview / 2 + 134 - 72, 68 + 144);
    }
    if(current_eq == 2)
    {
        if(eq3[5, 1] != -1) draw_sprite(sprArmorIcon, 3, view_wview / 2 + 134 - 72, 68 + 144);
    }
    if(current_eq == 3)
    {
        if(eq4[5, 1] != -1) draw_sprite(sprArmorIcon, 3, view_wview / 2 + 134 - 72, 68 + 144);
    }
    
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 + 134, 68 + 144, view_wview / 2 + 134 + 64, 68 + 144 + 64, false);
    draw_set_colour($808080);
    draw_rectangle(view_wview / 2 + 134, 68 + 144, view_wview / 2 + 134 + 64, 68 + 144 + 64, true);
    
    if(current_eq == 0)
    {
        if(eq1[4, 1] != -1) draw_sprite(sprArmorIcon, 2, view_wview / 2 + 134, 68 + 144);
    }
    if(current_eq == 1)
    {
        if(eq2[4, 1] != -1) draw_sprite(sprArmorIcon, 2, view_wview / 2 + 134, 68 + 144);
    }
    if(current_eq == 2)
    {
        if(eq3[4, 1] != -1) draw_sprite(sprArmorIcon, 2, view_wview / 2 + 134, 68 + 144);
    }
    if(current_eq == 3)
    {
        if(eq4[4, 1] != -1) draw_sprite(sprArmorIcon, 2, view_wview / 2 + 134, 68 + 144);
    }
    
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 + 134 + 72, 68 + 144, view_wview / 2 + 134 + 72 + 64, 68 + 144 + 64, false);
    draw_set_colour($808080);
    draw_rectangle(view_wview / 2 + 134 + 72, 68 + 144, view_wview / 2 + 134 + 72 + 64, 68 + 144 + 64, true);
    
    if(current_eq == 0)
    {
        if(eq1[6, 1] != -1) draw_sprite(sprArmorIcon, 4, view_wview / 2 + 134 + 72, 68 + 144);
    }
    if(current_eq == 1)
    {
        if(eq2[6, 1] != -1) draw_sprite(sprArmorIcon, 4, view_wview / 2 + 134 + 72, 68 + 144);
    }
    if(current_eq == 2)
    {
        if(eq3[6, 1] != -1) draw_sprite(sprArmorIcon, 4, view_wview / 2 + 134 + 72, 68 + 144);
    }
    if(current_eq == 3)
    {
        if(eq4[6, 1] != -1) draw_sprite(sprArmorIcon, 4, view_wview / 2 + 134 + 72, 68 + 144);
    }
    
    //draw_rectangle(view_wview / 2 - 270, 68, view_wview / 2 + 134 - 80, 132 + 144, false);
    
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90), 172 + lengthdir_y(80, 90));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 45), 172 + lengthdir_y(80, 90 + 45));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 90), 172 + lengthdir_y(80, 90 + 90));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 135), 172 + lengthdir_y(80, 90 + 135));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 180), 172 + lengthdir_y(80, 90 + 180));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 225), 172 + lengthdir_y(80, 90 + 225));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 270), 172 + lengthdir_y(80, 90 + 270));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 315), 172 + lengthdir_y(80, 90 + 315));
    
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_set_colour(c_white);
    
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 90), 172 + lengthdir_y(100, 90), "ATK");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 135), 172 + lengthdir_y(100, 135), "KRT");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 180), 172 + lengthdir_y(100, 180), "CZS");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 225), 172 + lengthdir_y(100, 225), "ZWT");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 270), 172 + lengthdir_y(100, 270), "ZRC");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 315), 172 + lengthdir_y(100, 315), "PNC");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 0), 172 + lengthdir_y(100, 0), "WTR");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 45), 172 + lengthdir_y(100, 45), "INC");
    
    draw_set_colour(c_gray);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    
    stat_max = max((hero[current_eq, 0] + hero[current_eq, 1]) / 2, hero[current_eq, 2], (hero[current_eq, 3] + hero[current_eq, 4]) / 2, hero[current_eq, 5] / 10, hero[current_eq, 6], hero[current_eq, 7], hero[current_eq, 8], hero[current_eq, 9]);
    
    stat_atk = 80 * ((hero[current_eq, 0] + hero[current_eq, 1]) / 2) / stat_max;
    stat_krt = 80 * hero[current_eq, 2] / stat_max;
    stat_czs = 80 * ((hero[current_eq, 3] + hero[current_eq, 4]) / 2) / stat_max;
    stat_zwt = 80 * (hero[current_eq, 5] / 10) / stat_max;
    stat_zrc = 80 * hero[current_eq, 6] / stat_max;
    stat_pnc = 80 * hero[current_eq, 7] / stat_max;
    stat_wtr = 80 * hero[current_eq, 8] / stat_max;
    stat_inc = 80 * hero[current_eq, 9] / stat_max;
    
    draw_set_colour(make_colour_rgb(153, 217, 234));
    
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_atk, 90), 172 + lengthdir_y(stat_atk, 90), view_wview / 2 - 108 + lengthdir_x(stat_krt, 135), 172 + lengthdir_y(stat_krt, 135), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_krt, 135), 172 + lengthdir_y(stat_krt, 135), view_wview / 2 - 108 + lengthdir_x(stat_czs, 180), 172 + lengthdir_y(stat_czs, 180), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_czs, 180), 172 + lengthdir_y(stat_czs, 180), view_wview / 2 - 108 + lengthdir_x(stat_zwt, 225), 172 + lengthdir_y(stat_zwt, 225), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_zwt, 225), 172 + lengthdir_y(stat_zwt, 225), view_wview / 2 - 108 + lengthdir_x(stat_zrc, 270), 172 + lengthdir_y(stat_zrc, 270), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_zrc, 270), 172 + lengthdir_y(stat_zrc, 270), view_wview / 2 - 108 + lengthdir_x(stat_pnc, 315), 172 + lengthdir_y(stat_pnc, 315), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_pnc, 315), 172 + lengthdir_y(stat_pnc, 315), view_wview / 2 - 108 + lengthdir_x(stat_wtr, 0), 172 + lengthdir_y(stat_wtr, 0), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_wtr, 0), 172 + lengthdir_y(stat_wtr, 0), view_wview / 2 - 108 + lengthdir_x(stat_inc, 45), 172 + lengthdir_y(stat_inc, 45), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_inc, 45), 172 + lengthdir_y(stat_inc, 45), view_wview / 2 - 108 + lengthdir_x(stat_atk, 90), 172 + lengthdir_y(stat_atk, 90), 2);
    
    draw_set_colour(c_gray);
    
    draw_line(view_wview /2 - 270, 132 + 144 + 8, view_wview / 2 + 270, 132 + 144 + 8)
    
    /*
                                view_yview + 292
    
    
    view_wview / 2 - 270                                view_wview / 2 + 270
    
    
                                view_yview + 452
    */
    
    //draw_rectangle(view_wview / 2 - 270, 292, view_wview / 2 + 270, 452, false);
    
    draw_set_colour(c_white);
    
    draw_text(view_wview / 2 - 270, 292, "Atak dominujacej reki: " + string(hero[current_eq, 0]));
    draw_text(view_wview / 2 - 270, 292 + 19, "Atak drugiej reki: " + string(hero[current_eq, 1]));
    draw_text(view_wview / 2 - 270, 292 + 38, "Obrazenia krytyczne: " + string(100 * hero[current_eq, 2]) + "%");
    draw_text(view_wview / 2 - 270, 292 + 57, "Obrazenia w czasie dominujacej reki: " + string(hero[current_eq, 3]));
    draw_text(view_wview / 2 - 270, 292 + 76, "Obrazenia w czasie drugiej reki: " + string(hero[current_eq, 4]));
    draw_text(view_wview / 2 - 270, 292 + 95, "Zywotnosc (HP): " + string(hero[current_eq, 5]));
    draw_text(view_wview / 2 - 270, 292 + 114, "Zrecznosc (AP): " + string(hero[current_eq, 6]));
    draw_text(view_wview / 2 - 270, 292 + 133, "Pancerz: " + string(hero[current_eq, 7]));
    draw_text(view_wview / 2 - 270, 292 + 152, "Wytrzymalosc: " + string(hero[current_eq, 8]));
    
    draw_set_colour(c_black);
    
    for(i = 0; i &lt; 7; i++)
    {
        if(eq_mouseover[i])
        {
            if( (current_eq == 0 &amp;&amp; eq1[i, 1] != -1) || (current_eq == 1 &amp;&amp; eq2[i, 1] != -1) || (current_eq == 2 &amp;&amp; eq3[i, 1] != -1) || (current_eq == 3 &amp;&amp; eq4[i, 1] != -1) )
            {
                draw_set_alpha(0.5);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 96 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, false);
                draw_set_alpha(1);
                draw_set_colour(c_gray);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 96 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, true);
                draw_set_colour(c_orange);
                if(current_eq == 0) draw_text(mouse_x + 8 - view_xview, mouse_y - 96 - view_yview, string(eq1[i, 0]));
                if(current_eq == 1) draw_text(mouse_x + 8 - view_xview, mouse_y - 96 - view_yview, string(eq2[i, 0]));
                if(current_eq == 2) draw_text(mouse_x + 8 - view_xview, mouse_y - 96 - view_yview, string(eq3[i, 0]));
                if(current_eq == 3) draw_text(mouse_x + 8 - view_xview, mouse_y - 96 - view_yview, string(eq4[i, 0]));
                draw_set_colour(c_white);
                
                if(current_eq == 0)
                {
                    switch(eq1[i, 1])
                    {   
                        case 0:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Przedmiot");
                            break;
                        case 1:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Miecz dlugi");
                            break;
                        case 2:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Topor");
                            break;
                        case 3:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Miecz krotki");
                            break;
                        case 4:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Siekiera");
                            break;
                        case 5:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Sztylet");
                            break;
                        case 6:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Luk");
                            break;
                        case 7:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Kusza");
                            break;
                        case 8:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Pistolet");
                            break;
                        case 9:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Glawia");
                            break;
                        case 21:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Helm");
                            break;
                        case 22:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Zbroja");
                            break;
                        case 23:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Spodnie");
                            break;
                        case 24:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Rekawice");
                            break;
                        case 25:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Buty");
                            break;
                        default:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Nieznane");
                    }
                    
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 32 - view_yview, "Atak: " + string(eq1[i, 2]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 48 - view_yview, "DoT: " + string(eq1[i, 3]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 64 - view_yview, "Szybkosc: " + string(eq1[i, 4]));
                    draw_set_colour(c_black);
                }
                
                if(current_eq == 1)
                {
                    switch(eq2[i, 1])
                    {   
                        case 0:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Przedmiot");
                            break;
                        case 1:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Miecz dlugi");
                            break;
                        case 2:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Topor");
                            break;
                        case 3:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Miecz krotki");
                            break;
                        case 4:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Siekiera");
                            break;
                        case 5:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Sztylet");
                            break;
                        case 6:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Luk");
                            break;
                        case 7:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Kusza");
                            break;
                        case 8:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Pistolet");
                            break;
                        case 9:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Glawia");
                            break;
                        case 21:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Helm");
                            break;
                        case 22:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Zbroja");
                            break;
                        case 23:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Spodnie");
                            break;
                        case 24:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Rekawice");
                            break;
                        case 25:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Buty");
                            break;
                        default:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Nieznane");
                    }
                    
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 32 - view_yview, "Atak: " + string(eq2[i, 2]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 48 - view_yview, "DoT: " + string(eq2[i, 3]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 64 - view_yview, "Szybkosc: " + string(eq2[i, 4]));
                    draw_set_colour(c_black);
                }
                
                if(current_eq == 2)
                {
                    switch(eq3[i, 1])
                    {   
                        case 0:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Przedmiot");
                            break;
                        case 1:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Miecz dlugi");
                            break;
                        case 2:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Miecz krotki");
                            break;
                        case 3:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Topor");
                            break;
                        case 4:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Siekiera");
                            break;
                        case 5:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Sztylet");
                            break;
                        case 6:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Luk");
                            break;
                        case 7:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Kusza");
                            break;
                        case 8:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Pistolet");
                            break;
                        case 9:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Glawia");
                            break;
                        case 21:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Helm");
                            break;
                        case 22:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Zbroja");
                            break;
                        case 23:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Spodnie");
                            break;
                        case 24:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Rekawice");
                            break;
                        case 25:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Buty");
                            break;
                        default:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Nieznane");
                    }
                    
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 32 - view_yview, "Atak: " + string(eq3[i, 2]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 48 - view_yview, "DoT: " + string(eq3[i, 3]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 64 - view_yview, "Szybkosc: " + string(eq3[i, 4]));
                    draw_set_colour(c_black);
                }
                
                if(current_eq == 3)
                {
                    switch(eq4[i, 1])
                    {   
                        case 0:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Przedmiot");
                            break;
                        case 1:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Miecz dlugi");
                            break;
                        case 2:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Miecz krotki");
                            break;
                        case 3:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Topor");
                            break;
                        case 4:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Siekiera");
                            break;
                        case 5:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Sztylet");
                            break;
                        case 6:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Luk");
                            break;
                        case 7:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Kusza");
                            break;
                        case 8:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Pistolet");
                            break;
                        case 9:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Glawia");
                            break;
                        case 21:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Helm");
                            break;
                        case 22:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Zbroja");
                            break;
                        case 23:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Spodnie");
                            break;
                        case 24:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Rekawice");
                            break;
                        case 25:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Buty");
                            break;
                        default:
                            draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Nieznane");
                    }
                    
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 32 - view_yview, "Atak: " + string(eq4[i, 2]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 48 - view_yview, "DoT: " + string(eq4[i, 3]));
                    draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 64 - view_yview, "Szybkosc: " + string(eq4[i, 4]));
                    draw_set_colour(c_black);
                }
            }
        }
    }
    
    for(i = 0; i &lt; 24; i ++)
    {
        if(inv_mouseover[i])
        {
            if(inv[i, 1] != -1)
            {
                draw_set_alpha(0.5);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 96 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, false);
                draw_set_alpha(1);
                draw_set_colour(c_gray);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 96 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, true);
                draw_set_colour(c_orange);
                draw_text(mouse_x + 8 - view_xview, mouse_y - 96 - view_yview, string(inv[i, 0]));
                draw_set_colour(c_white);
                
                switch(inv[i, 1])
                {
                    /*
                    0 - inne - nie do ubrania
            
                    1 - miecz 2h
                    2 - miecz 1h
                    3 - topor 2h
                    4 - siekiera 1h
                    5 - sztylet 1h
                    6 - luk 2h
                    7 - kusza 2h
                    8 - pistolet 1h
                    9 - glawia 1h
                    
                    21 - helm
                    22 - zbroja
                    23 - spodnie
                    24 - rekawice
                    25 - buty
                    */
                    
                    case 0:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Przedmiot");
                        break;
                    case 1:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Miecz dlugi");
                        break;
                    case 2:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Miecz krotki");
                        break;
                    case 3:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Topor");
                        break;
                    case 4:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Siekiera");
                        break;
                    case 5:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Sztylet");
                        break;
                    case 6:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Luk");
                        break;
                    case 7:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Kusza");
                        break;
                    case 8:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Pistolet");
                        break;
                    case 9:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Glawia");
                        break;
                    case 21:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Helm");
                        break;
                    case 22:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Zbroja");
                        break;
                    case 23:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Spodnie");
                        break;
                    case 24:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Rekawice");
                        break;
                    case 25:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Buty");
                        break;
                    default:
                        draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 16 - view_yview, "Nieznane");
                }
                
                draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 32 - view_yview, "Atak: " + string(inv[i, 2]));
                draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 48 - view_yview, "DoT: " + string(inv[i, 3]));
                draw_text(mouse_x + 8 - view_xview, mouse_y - 96 + 64 - view_yview, "Szybkosc: " + string(inv[i, 4]));
                draw_set_colour(c_black);
            }
        }
    }
    
}

if(show_char)
{
    draw_set_alpha(0.5);
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 - 278, 16, view_wview / 2 + 278, 56, false);
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_colour(view_wview / 2, 36, string(heroBase[current_eq, 0]), c_white, c_white, c_white, c_white, 1);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_rectangle(view_wview / 2 - 278, 60, view_wview / 2 + 278, 344, false);
    
    draw_rectangle(view_wview / 2 - 144, view_hview - 288 - 32, view_wview /2 + 144, view_hview - 32, false);
    draw_set_alpha(1);
    draw_set_colour($808080);
    
    if(prev_eq_mouseover)
    {
        draw_set_colour($BBBBBB);
        draw_rectangle(view_wview / 2 - 270, 24, view_wview / 2 - 246, 48, false);
        draw_set_colour($808080);
    }
    else draw_rectangle(view_wview / 2 - 270, 24, view_wview / 2 - 246, 48, false);
    draw_sprite(sprArrowSmall, 2, view_wview / 2 - 270, 24);
    
    if(next_eq_mouseover)
    {
        draw_set_colour($BBBBBB);
        draw_rectangle(view_wview / 2 + 246, 24, view_wview / 2 + 270, 48, false);
        draw_set_colour($808080);
    }
    else draw_rectangle(view_wview / 2 + 246, 24, view_wview / 2 + 270, 48, false);
    draw_sprite(sprArrowSmall, 0, view_wview / 2 + 246, 24);
    
    draw_rectangle(view_wview / 2 + 60, 85, view_wview / 2 + 84, 109, false);
    draw_sprite(sprPlus, 0, view_wview / 2 + 60, 85);
    draw_set_halign(fa_center);
    draw_set_colour(c_white);
    draw_text(view_wview / 2 + 100, 90, string(heroBase[current_eq, 1]));
    draw_set_halign(fa_left);
    draw_text(view_wview / 2 + 116, 90, "Atak");
    draw_set_colour(c_gray);
    
    draw_rectangle(view_wview / 2 + 60, 115, view_wview / 2 + 84, 139, false);
    draw_sprite(sprPlus, 0, view_wview / 2 + 60, 115);
    draw_set_halign(fa_center);
    draw_set_colour(c_white);
    draw_text(view_wview / 2 + 100, 120, string(heroBase[current_eq, 2]));
    draw_set_halign(fa_left);
    draw_text(view_wview / 2 + 116, 120, "Obr. krytyczne");
    draw_set_colour(c_gray);
    
    draw_rectangle(view_wview / 2 + 60, 145, view_wview / 2 + 84, 169, false);
    draw_sprite(sprPlus, 0, view_wview / 2 + 60, 145);
    draw_set_halign(fa_center);
    draw_set_colour(c_white);
    draw_text(view_wview / 2 + 100, 150, string(heroBase[current_eq, 3]));
    draw_set_halign(fa_left);
    draw_text(view_wview / 2 + 116, 150, "Obr. w czasie");
    draw_set_colour(c_gray);
    
    draw_rectangle(view_wview / 2 + 60, 175, view_wview / 2 + 84, 199, false);
    draw_sprite(sprPlus, 0, view_wview / 2 + 60, 175);
    draw_set_halign(fa_center);
    draw_set_colour(c_white);
    draw_text(view_wview / 2 + 100, 180, string(heroBase[current_eq, 4]));
    draw_set_halign(fa_left);
    draw_text(view_wview / 2 + 116, 180, "Zywotnosc");
    draw_set_colour(c_gray);
    
    draw_rectangle(view_wview / 2 + 60, 205, view_wview / 2 + 84, 229, false);
    draw_sprite(sprPlus, 0, view_wview / 2 + 60, 205);
    draw_set_halign(fa_center);
    draw_set_colour(c_white);
    draw_text(view_wview / 2 + 100, 210, string(heroBase[current_eq, 5]));
    draw_set_halign(fa_left);
    draw_text(view_wview / 2 + 116, 210, "Zrecznosc");
    draw_set_colour(c_gray);
    
    draw_rectangle(view_wview / 2 + 60, 235, view_wview / 2 + 84, 259, false);
    draw_sprite(sprPlus, 0, view_wview / 2 + 60, 235);
    draw_set_halign(fa_center);
    draw_set_colour(c_white);
    draw_text(view_wview / 2 + 100, 240, string(heroBase[current_eq, 6]));
    draw_set_halign(fa_left);
    draw_text(view_wview / 2 + 116, 240, "Inicjatywa");
    draw_set_colour(c_gray);
    
    //draw_rectangle(view_wview / 2 - 270, 68, view_wview / 2 + 134 - 80, 132 + 144, false);
    
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90), 172 + lengthdir_y(80, 90));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 45), 172 + lengthdir_y(80, 90 + 45));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 90), 172 + lengthdir_y(80, 90 + 90));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 135), 172 + lengthdir_y(80, 90 + 135));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 180), 172 + lengthdir_y(80, 90 + 180));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 225), 172 + lengthdir_y(80, 90 + 225));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 270), 172 + lengthdir_y(80, 90 + 270));
    draw_line(view_wview / 2 - 108, 172, view_wview / 2 - 108 + lengthdir_x(80, 90 + 315), 172 + lengthdir_y(80, 90 + 315));
    
    draw_set_valign(fa_middle);
    draw_set_halign(fa_center);
    draw_set_colour(c_white);
    
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 90), 172 + lengthdir_y(100, 90), "ATK");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 135), 172 + lengthdir_y(100, 135), "KRT");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 180), 172 + lengthdir_y(100, 180), "CZS");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 225), 172 + lengthdir_y(100, 225), "ZWT");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 270), 172 + lengthdir_y(100, 270), "ZRC");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 315), 172 + lengthdir_y(100, 315), "PNC");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 0), 172 + lengthdir_y(100, 0), "WTR");
    draw_text(view_wview / 2 - 108 + lengthdir_x(100, 45), 172 + lengthdir_y(100, 45), "INC");
    
    draw_set_colour(c_gray);
    draw_set_valign(fa_top);
    draw_set_halign(fa_left);
    
    stat_max = max((hero[current_eq, 0] + hero[current_eq, 1]) / 2, hero[current_eq, 2], (hero[current_eq, 3] + hero[current_eq, 4]) / 2, hero[current_eq, 5] / 10, hero[current_eq, 6], hero[current_eq, 7], hero[current_eq, 8], hero[current_eq, 9]);
    
    stat_atk = 80 * ((hero[current_eq, 0] + hero[current_eq, 1]) / 2) / stat_max;
    stat_krt = 80 * hero[current_eq, 2] / stat_max;
    stat_czs = 80 * ((hero[current_eq, 3] + hero[current_eq, 4]) / 2) / stat_max;
    stat_zwt = 80 * (hero[current_eq, 5] / 10) / stat_max;
    stat_zrc = 80 * hero[current_eq, 6] / stat_max;
    stat_pnc = 80 * hero[current_eq, 7] / stat_max;
    stat_wtr = 80 * hero[current_eq, 8] / stat_max;
    stat_inc = 80 * hero[current_eq, 9] / stat_max;
    
    draw_set_colour(make_colour_rgb(153, 217, 234));
    
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_atk, 90), 172 + lengthdir_y(stat_atk, 90), view_wview / 2 - 108 + lengthdir_x(stat_krt, 135), 172 + lengthdir_y(stat_krt, 135), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_krt, 135), 172 + lengthdir_y(stat_krt, 135), view_wview / 2 - 108 + lengthdir_x(stat_czs, 180), 172 + lengthdir_y(stat_czs, 180), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_czs, 180), 172 + lengthdir_y(stat_czs, 180), view_wview / 2 - 108 + lengthdir_x(stat_zwt, 225), 172 + lengthdir_y(stat_zwt, 225), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_zwt, 225), 172 + lengthdir_y(stat_zwt, 225), view_wview / 2 - 108 + lengthdir_x(stat_zrc, 270), 172 + lengthdir_y(stat_zrc, 270), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_zrc, 270), 172 + lengthdir_y(stat_zrc, 270), view_wview / 2 - 108 + lengthdir_x(stat_pnc, 315), 172 + lengthdir_y(stat_pnc, 315), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_pnc, 315), 172 + lengthdir_y(stat_pnc, 315), view_wview / 2 - 108 + lengthdir_x(stat_wtr, 0), 172 + lengthdir_y(stat_wtr, 0), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_wtr, 0), 172 + lengthdir_y(stat_wtr, 0), view_wview / 2 - 108 + lengthdir_x(stat_inc, 45), 172 + lengthdir_y(stat_inc, 45), 2);
    draw_line_width(view_wview / 2 - 108 + lengthdir_x(stat_inc, 45), 172 + lengthdir_y(stat_inc, 45), view_wview / 2 - 108 + lengthdir_x(stat_atk, 90), 172 + lengthdir_y(stat_atk, 90), 2);
    
    draw_set_colour(c_gray);
    
    draw_line(view_wview / 2 - 270, 132 + 144 + 8, view_wview / 2 + 270, 132 + 144 + 8)
    
    for(i = 0; i &lt; 10; i++)
    {
        if(action[current_eq, i]) draw_sprite(sprSkillIcon, 1 + (action[current_eq, i]), view_wview / 2 - 270 + i*(60/9) + i*48, 292);
        else draw_sprite(sprSkillIcon, 0, view_wview / 2 - 270 + i*(60/9) + i*48, 292);
        draw_set_colour(c_black);
        //draw_text(view_wview / 2 - 270 + i*(60/9) + i*48, 292, string(action[current_eq, i]));
    }
    
    for(i = 0; i &lt; 5; i++)
    {
        for(j = 0; j &lt; 5; j++)
        {
            draw_sprite(sprSkillIcon, 2 + 43 + i*5 + j, view_wview / 2 - 144 + (j+1)*8 + j*48, view_hview - 288 - 24 + i*8 + i*48);
            //draw_text(view_wview / 2 - 144 + (j+1)*8 + j*48, view_hview - 288 - 24 + i*8 + i*48, string(i*5 + j));
        }
    }
    
    for(i = 0; i &lt; 10; i++)
    {
        if(skill_mouseover[i])
        {
            draw_sprite_ext(sprSkillIcon, 1, view_wview / 2 - 270 + i*(60/9) + i*48, 292, 1, 1, 0, c_white, 0.3);
            draw_set_alpha(0.5);
            draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 96 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, false);
            draw_set_alpha(1);
            draw_set_colour(c_orange);
            draw_text(mouse_x + 4 - view_xview + 4, mouse_y - 4 - 96 - view_yview + 4, ActionCtrl.action[(action[current_eq, i]), 0]);
            draw_set_colour(c_white);
            draw_text_ext(mouse_x + 4 - view_xview + 4, mouse_y - 4 - 96 - view_yview + 20, ActionCtrl.action[(action[current_eq, i]), 9], -1, 280);
            draw_set_colour(c_gray);
            draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 96 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, true);
            draw_set_colour(c_black);
        }
    }
    
    for(i = 0; i &lt; 5; i++)
    {
        for(j = 0; j &lt; 5; j++)
        {
            if(skillbook_mouseover[i*5+j]) 
            {
                draw_sprite_ext(sprSkillIcon, 1, view_wview / 2 - 144 + (j+1)*8 + j*48, view_hview - 288 - 24 + i*8 + i*48, 1, 1, 0, c_white, 0.3);
                draw_set_alpha(0.5);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 96 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, false);
                draw_set_alpha(1);
                draw_set_colour(c_orange);
                draw_text(mouse_x + 4 - view_xview + 4, mouse_y - 4 - 96 - view_yview + 4, ActionCtrl.action[i*5+j+44, 0]);
                draw_set_colour(c_white);
                draw_text_ext(mouse_x + 4 - view_xview + 4, mouse_y - 4 - 96 - view_yview + 20, ActionCtrl.action[i*5+j+44, 9], -1, 280);
                draw_set_colour(c_gray);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 96 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, true);
                draw_set_colour(c_black);
            }
        }
    }
    
    
}

if(grabbed_item[1] != -1)
{
    /*tempcol = draw_get_colour();
    draw_set_colour(c_gray);
    draw_rectangle(mouse_x - view_xview - 32, mouse_y - view_yview - 32, mouse_x - view_xview + 32, mouse_y - view_yview + 32, false);
    draw_set_colour(tempcol);*/
    
    if(grabbed_item[1] == 0) draw_sprite(sprItemIcon, 0, mouse_x - view_xview - 32, mouse_y - view_yview - 32);
    if(grabbed_item[1] &gt;= 1 &amp;&amp; grabbed_item[1] &lt;= 9) draw_sprite(sprWeaponIcon, -2 + grabbed_item[1], mouse_x - view_xview - 32, mouse_y - view_yview - 32);
    if(grabbed_item[1] &gt;= 21 &amp;&amp; grabbed_item[1] &lt;= 25) draw_sprite(sprArmorIcon, -21 + grabbed_item[1], mouse_x - view_xview - 32, mouse_y - view_yview - 32);
}

if(grabbed_skill)
{
    draw_sprite(sprSkillIcon, 2 + (grabbed_skill % 5), mouse_x - view_xview + 8, mouse_y - view_yview - 8);
    //draw_text(mouse_x - view_xview + 8, mouse_y - view_yview - 8, string(grabbed_skill));
}

if(Ctrl.mode == 1)
{
    draw_set_alpha(0.5);
    draw_set_colour(c_black);
    draw_rectangle(view_wview / 2 - 262, view_hview - 60, view_wview / 2 + 262, view_hview - 4, false);
    draw_set_alpha(1);
    
    if(Ctrl.heroesturn)
    {
        for(i = 0; i &lt; 10; i++)
        {
            draw_sprite(sprSkillIcon, 1 + (action[current_eq, i]), view_wview / 2 - 258 + i*4 + i*48, view_hview - 56);
            if(Ctrl.cooldown[current_eq, i] &gt; 0)
            {
                draw_set_alpha(0.5);
                draw_set_colour(c_black);
                draw_rectangle(view_wview / 2 - 258 + (i - 1) * 4 + (i - 1) * 48, view_hview - 56, view_wview / 2 - 258 + (i - 1) * 4 + (i - 1) * 48 + 48, view_hview - 56 + 48, false);
                draw_set_alpha(1);
                draw_set_colour(c_orange);
                draw_set_valign(fa_middle);
                draw_set_halign(fa_center);
                draw_text(view_wview / 2 - 258 + (i - 1) * 4 + (i - 1) * 48 + 24, view_hview - 56 + 24, string(Ctrl.cooldown[current_eq, i]));
                draw_set_valign(fa_top);
                draw_set_halign(fa_left);
            }
            //draw_text(view_wview / 2 - 258 + i*4 + i*48, view_hview - 56, string(action[current_eq, i]));
        }
        
        for(i = 0; i &lt; 10; i++)
        {
            if(skillbar_mouseover[i])
            {
                draw_set_alpha(0.3);
                draw_set_colour(c_white);
                draw_rectangle(view_wview / 2 - 258 + i*4 + i*48, view_hview - 56, view_wview / 2 - 258 + i*4 + (i+1)*48, view_hview - 8, false);
                draw_set_alpha(0.5);
                draw_set_colour(c_black);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 96 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, false);
                draw_set_alpha(1);
                draw_set_colour(c_orange);
                draw_text(mouse_x + 4 - view_xview + 4, mouse_y - 4 - 96 - view_yview + 4, ActionCtrl.action[(action[current_eq, i]), 0]);
                draw_set_colour(c_white);
                draw_text_ext(mouse_x + 4 - view_xview + 4, mouse_y - 4 - 96 - view_yview + 20, ActionCtrl.action[(action[current_eq, i]), 9], -1, 280);
                draw_set_colour(c_gray);
                draw_rectangle(mouse_x + 4 - view_xview, mouse_y - 4 - 96 - view_yview, mouse_x + 4 + 288 - view_xview, mouse_y - 4 - view_yview, true);
                draw_set_colour(c_black);
            }
        }
    }
    else
    {
        for(i = 0; i &lt; 10; i++)
        {
            draw_set_colour($404040);
            draw_rectangle(view_wview / 2 - 258 + i*4 + i*48, view_hview - 56, view_wview / 2 - 258 + i*4 + (i+1)*48, view_hview - 8, false);
        }
    }
}
else
{
    for(i = 0; i &lt; quests; i++)
    {
        if(quest_tracking[i])
        {
            if(quest[i, 3] == 1)
            {
                draw_sprite_ext(sprTracker, 0, (Ctrl.h1).x - view_xview, (Ctrl.h1).y - view_yview, 1, 1, point_direction((Ctrl.h1).x - view_xview, (Ctrl.h1).y - view_yview, (quest[i, 0]).x - view_xview, (quest[i, 0]).y - view_yview), c_white, 1);
                draw_sprite(sprTracker, 1, (Ctrl.h1).x - view_xview + lengthdir_x(76, point_direction((Ctrl.h1).x - view_xview, (Ctrl.h1).y - view_yview, (quest[i, 0]).x - view_xview, (quest[i, 0]).y - view_yview)), (Ctrl.h1).y - view_yview + lengthdir_y(76, point_direction((Ctrl.h1).x - view_xview, (Ctrl.h1).y - view_yview, (quest[i, 0]).x - view_xview, (quest[i, 0]).y - view_yview)));
            }
            if(quest[i, 3] == 2)
            {
                draw_sprite_ext(sprTracker, 0, (Ctrl.h1).x - view_xview, (Ctrl.h1).y - view_yview, 1, 1, point_direction((Ctrl.h1).x - view_xview, (Ctrl.h1).y - view_yview, (quest[i, 2]).x - view_xview, (quest[i, 2]).y - view_yview), c_white, 1);
                draw_sprite(sprTracker, 2, (Ctrl.h1).x - view_xview + lengthdir_x(76, point_direction((Ctrl.h1).x - view_xview, (Ctrl.h1).y - view_yview, (quest[i, 2]).x - view_xview, (quest[i, 2]).y - view_yview)), (Ctrl.h1).y - view_yview + lengthdir_y(76, point_direction((Ctrl.h1).x - view_xview, (Ctrl.h1).y - view_yview, (quest[i, 2]).x - view_xview, (quest[i, 2]).y - view_yview)));
            }
        }
    }
    
    if(show_quests)
    {
        draw_set_alpha(0.5);
        draw_set_colour(c_black);
        draw_rectangle(view_wview - 200, 100, view_wview, 120 + (quests * 36), false);
        draw_set_alpha(1);
        draw_set_colour(c_orange);
        draw_set_halign(fa_center);
        draw_text(view_wview - 100, 106, "Zlecenia");
        draw_set_halign(fa_left);
        draw_set_colour(c_white);
        
        for(i = 0; i &lt; quests; i++)
        {
            draw_text(view_wview - 196, 120 + (i * 36), "Nagroda: " + string(quest[i, 1]) + "#Sledzenie: ");
            draw_rectangle(view_wview - 100, 136 + (i * 36), view_wview - 84, 152 + (i * 36), true);
            if(quest_tracking[i]) draw_rectangle(view_wview - 100, 136 + (i * 36), view_wview - 84, 152 + (i * 36), false);
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="86">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_quests = !show_quests;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="67">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Ctrl.mode == 0)
{
    show_char = !show_char;
    show_inv = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Ctrl.mode == 0)
{
    show_inv = !show_inv;
    show_char = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
