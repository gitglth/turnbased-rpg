<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprEnemy</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>BattleParent</parentName>
  <maskName>sprHexMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>for(i = 0; i &lt; 8; i++)
{
    buff[i, 0] = 0;
    buff[i, 1] = 0;
    debuff[i, 0] = 0;
    debuff[i, 1] = 0;
}

myturn = -1;
battle = false;
initiative = round(random(1000));
blend = 255;
image_angle = 0;
image_alpha = 1;
hp = 1600 + irandom(800);
maxhp = hp;
hpPrevious = hp;
ap = 120 + irandom(60);
maxap = ap;
dead = 0;
image_speed = 0;
height = 100;
marked = false;
markedc = c_black;
goto_x = x;
goto_y = y;
stage = 0;
animation_alarm = -1;
target = 0;

action[0, 0] = 0;
action[0, 1] = 120;
action[0, 2] = 30;
action[0, 3] = 5;

action[1, 0] = 0;
action[1, 1] = 180;
action[1, 2] = 50;
action[1, 3] = 5;

action[2, 0] = 0;
action[2, 1] = 60;
action[2, 2] = 20;
action[2, 3] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>goto_x = (link).x - 250 + random(500);
goto_y = (link).y + (-sqrt(62500 - ((link).x-goto_x)*((link).x-goto_x)) + random(2*sqrt(62500 - ((link).x-goto_x)*((link).x-goto_x))))/2;

while(!place_free(goto_x,goto_y))
{
    goto_x = (link).x - 250 + random(500);
    goto_y = (link).y + (-sqrt(62500 - ((link).x-goto_x)*((link).x-goto_x)) + random(2*sqrt(62500 - ((link).x-goto_x)*((link).x-goto_x))))/2;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Ctrl.nextturn = true;
ap = maxap;
stage = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dead = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth=-y;

if(hpPrevious != hp)
{
    dn = instance_create(x, y - 96, DamageNumber);
    dn.damage = hpPrevious - hp;
}

hpPrevious = hp;

maxspeed=3*(1/2+abs(cos(degtorad(point_direction(x,y,goto_x,goto_y))))*1/2);

if(Ctrl.mode == 0 &amp;&amp; dead == 0)
{
    if(speed == 0 &amp;&amp; alarm[2] == -1) alarm[2] = room_speed*5 + random(room_speed*5);
    else
    {
        if(point_distance(x,y,goto_x,goto_y) &gt;= maxspeed)
        {
            move_towards_point(goto_x,goto_y,maxspeed);
            direction = point_direction(x, y, goto_x, goto_y);
        }
        else
        {
            speed = 0;
            x = goto_x;
            y = goto_y;
        }
    }
}
else
{
    speed = 0;
    alarm[2] = -1;
}

if(animation_alarm &gt; -1) animation_alarm --;

if(Ctrl.mode == 1 &amp;&amp; Ctrl.hexcomplete &amp;&amp; animation_alarm &lt;= 0)
{
    if(stage &gt; 4) stage = 0;
    if(myturn==Ctrl.turn)
    {
        Ctrl.currentChar = id;
        
        if(instance_exists(MoveMarker))
        {
            maxspeed=3*(1/2+abs(cos(degtorad(direction)))*1/2);
            speed = 0;
            if(Ctrl.turn==myturn)
            {
                for(mh = 1; mh &lt;= 7; mh++)
                {
                    moveHex = instance_nearest2(x, y, Hex, mh);
                    if(moveHex.pathMoveMark) break;
                    if(mh == 7)
                    {
                        with(MoveMarker) instance_destroy();
                    }
                }
                
                direction = point_direction(x, y, moveHex.x, moveHex.y);
                if(point_distance(x, y, moveHex.x, moveHex.y) &gt; maxspeed) move_towards_point(moveHex.x, moveHex.y, maxspeed);
                else
                {
                    x = moveHex.x;
                    y = moveHex.y;
                    speed = 0;
                    moveHex.pathMoveMark = false;
                }
            }
        }
        else
        {
            speed = 0;
            if(stage == 0) //sprawdzenie czy zyje
            {
                //show_message("0 - sprawdzenie czy zyje");
                if(hp &lt;= 0 || ap &lt;= 0) Ctrl.nextturn = true;
                else stage++;
            }
            else if(stage == 1) //losowanie akcji do wykonania
            {
                //show_message("1 - losowanie akcji");
                actionid = irandom(2);
                if(action[actionid, 2] &gt; ap)
                {
                    stage = 0; 
                    Ctrl.nextturn = true;
                }
                stage++;
            }
            else if(stage == 2) //ruch
            {
                //show_message("2 - ruch");
                if(action[actionid,0] == 1) //wylosowano akcje w zwarciu
                {
                    if(instance_position(x+98, y, Hero) || instance_position(x-98, y, Hero) || instance_position(x+49, y-25, Hero) || instance_position(x-49, y-25, Hero) || instance_position(x+49, y+25, Hero) || instance_position(x-49, y+25, Hero))
                    {
                        //show_message("Pominieto");
                        //stage++;
                    }
                    else
                    {
                        target = Ctrl.h1;
                        hex[0] = instance_position(target.x + 96, target.y, Hex);
                        hex[1] = instance_position(target.x + 48, target.y - 36, Hex);
                        hex[2] = instance_position(target.x - 48, target.y - 36, Hex);
                        hex[3] = instance_position(target.x - 96, target.y, Hex);
                        hex[4] = instance_position(target.x - 48, target.y + 36, Hex);
                        hex[5] = instance_position(target.x + 48, target.y + 36, Hex);
                        
                        target = Ctrl.h2;
                        hex[6] = instance_position(target.x + 96, target.y, Hex);
                        hex[7] = instance_position(target.x + 48, target.y - 36, Hex);
                        hex[8] = instance_position(target.x - 48, target.y - 36, Hex);
                        hex[9] = instance_position(target.x - 96, target.y, Hex);
                        hex[10] = instance_position(target.x - 48, target.y + 36, Hex);
                        hex[11] = instance_position(target.x + 48, target.y + 36, Hex);
                        
                        target = Ctrl.h3;
                        hex[12] = instance_position(target.x + 96, target.y, Hex);
                        hex[13] = instance_position(target.x + 48, target.y - 36, Hex);
                        hex[14] = instance_position(target.x - 48, target.y - 36, Hex);
                        hex[15] = instance_position(target.x - 96, target.y, Hex);
                        hex[16] = instance_position(target.x - 48, target.y + 36, Hex);
                        hex[17] = instance_position(target.x + 48, target.y + 36, Hex);
                        
                        target = Ctrl.h4;
                        hex[18] = instance_position(target.x + 96, target.y, Hex);
                        hex[19] = instance_position(target.x + 48, target.y - 36, Hex);
                        hex[20] = instance_position(target.x - 48, target.y - 36, Hex);
                        hex[21] = instance_position(target.x - 96, target.y, Hex);
                        hex[22] = instance_position(target.x - 48, target.y + 36, Hex);
                        hex[23] = instance_position(target.x + 48, target.y + 36, Hex);
                        
                        hextarget = -1;
                        hexdistmin = 1000;
                        
                        for(hd = 0; hd &lt; 24; hd++)
                        {
                            with(Hex)
                            {
                                pathDistance = -1;
                                pathParent = -1;
                                pathMoveMark = false;
                            }
                            
                            pathFound = false;
                            gotoHex = hex[hd];
                            if(gotoHex)
                            {
                                if(!gotoHex.occupied)
                                {
                                    h = instance_position(x, y, Hex);
                                    if(h)
                                    {
                                        h.pathDistance = 0;
                                        z = 0;
                                        pathDist = 1;
                                        path_check_around(h);
                                        
                                        while(!pathFound || z &lt; 400)
                                        {
                                            for(i = 0; i &lt; instance_number(Hex); i++)
                                            {
                                                a = instance_find(Hex, i);
                                                
                                                if(a.pathDistance == pathDist)
                                                {
                                                    if(a == gotoHex)
                                                    {
                                                        pathFound = true;
                                                    }
                                                    else
                                                    {
                                                        path_check_around(a);
                                                    }
                                                }
                                                
                                            }
                                            pathDist++;
                                            z++;
                                        }
                                        if(pathFound)
                                        {
                                            gotoHex.pathMoveMark = true;
                                            path_check_parent(gotoHex);
                                        }
                                    }
                                }
                            }
                            
                            if(pathFound)
                            {
                                if(gotoHex.pathDistance &lt; hexdistmin)
                                {
                                    hexdistmin = gotoHex.pathDistance;
                                    hextarget = gotoHex;
                                }
                            }
                        }
                        
                        if(hextarget != -1)
                        {
                            {
                                if(hextarget &gt;= 0 &amp;&amp; hextarget &lt;= 5) target = Ctrl.h1;
                                if(hextarget &gt;= 6 &amp;&amp; hextarget &lt;= 11) target = Ctrl.h2;
                                if(hextarget &gt;= 12 &amp;&amp; hextarget &lt;= 17) target = Ctrl.h3;
                                if(hextarget &gt;= 18 &amp;&amp; hextarget &lt;= 23) target = Ctrl.h4;
                            }
                            
                            with(Hex)
                            {
                                pathDistance = -1;
                                pathParent = -1;
                                pathMoveMark = false;
                            }
                            
                            pathFound = false;
                            gotoHex = hextarget;
                            if(gotoHex)
                            {
                                if(!gotoHex.occupied)
                                {
                                    h = instance_position(x, y, Hex);
                                    if(h)
                                    {
                                        h.pathDistance = 0;
                                        z = 0;
                                        pathDist = 1;
                                        path_check_around(h);
                                        
                                        while(!pathFound || z &lt; 400)
                                        {
                                            for(i = 0; i &lt; instance_number(Hex); i++)
                                            {
                                                a = instance_find(Hex, i);
                                                
                                                if(a.pathDistance == pathDist)
                                                {
                                                    if(a == gotoHex)
                                                    {
                                                        pathFound = true;
                                                    }
                                                    else
                                                    {
                                                        path_check_around(a);
                                                    }
                                                }
                                                
                                            }
                                            pathDist++;
                                            z++;
                                        }
                                        if(pathFound)
                                        {
                                            gotoHex.pathMoveMark = true;
                                            path_check_parent(gotoHex);
                                        }
                                    }
                                }
                            }
                            if(ap &gt;= 20)
                            {
                                while(ap &lt; gotoHex.pathDistance * 20)
                                {
                                    gotoHex = gotoHex.pathParent;
                                }
                                instance_create(gotoHex.x, gotoHex.y, MoveMarker);
                                ap -= gotoHex.pathDistance * 20;
                            }
                        }
                        else
                        {
                            //czekaj
                            if(animation_alarm &lt; 0) animation_alarm = room_speed;
                        }
                    }
                }
                if(action[actionid, 0] == 0) //dystansowy
                {
                    h1 = instance_find(Hero, 0);
                    h2 = instance_find(Hero, 1);
                    h3 = instance_find(Hero, 2);
                    h4 = instance_find(Hero, 3);
                    
                    distmin = sqrt( (x - h1.x)*(x - h1.x) + 4*(y - h1.y)*(y - h1.y) );
                    target = h1;
                    
                    if(sqrt( (x - h2.x)*(x - h2.x) + 4*(y - h2.y)*(y - h2.y) ) &lt; distmin)
                    {
                        distmin = sqrt( (x - h2.x)*(x - h2.x) + 4*(y - h2.y)*(y - h2.y) );
                        target = h2;
                    }
                    if(sqrt( (x - h3.x)*(x - h3.x) + 4*(y - h3.y)*(y - h3.y) ) &lt; distmin)
                    {
                        distmin = sqrt( (x - h3.x)*(x - h3.x) + 4*(y - h3.y)*(y - h3.y) );
                        target = h3;
                    }
                    if(sqrt( (x - h4.x)*(x - h4.x) + 4*(y - h4.y)*(y - h4.y) ) &lt; distmin)
                    {
                        distmin = sqrt( (x - h4.x)*(x - h4.x) + 4*(y - h4.y)*(y - h4.y) );
                        target = h4;
                    }
                    
                    if(collision_line(x, y, target.x, target.y, ObstacleMarker, true, true) || sqrt((x - target.x)*(x - target.x) + 4*(y - target.y)*(y - target.y)) &gt; action[actionid, 3]*96)
                    {
                        gotoFound = false;
                        
                        for(i = 0; i &lt; instance_number(Hex); i++)
                        {
                            a = instance_nearest2(x, y, Hex, i);
                            
                            if(!collision_line(target.x, target.y, a.x, a.y, ObstacleMarker, true, true) &amp;&amp; sqrt((target.x - a.x)*(target.x - a.x) + 4*(target.y - a.y)*(target.y - a.y)) &lt;= action[actionid, 3]*96)
                            {
                                gotoFound = true;
                                gotoHex = a;
                                break;
                            }
                        }
                        
                        if(gotoFound)
                        {
                            with(Hex)
                            {
                                pathDistance = -1;
                                pathParent = -1;
                                pathMoveMark = false;
                            }
                            
                            pathFound = false;
                            if(gotoHex)
                            {
                                if(!gotoHex.occupied)
                                {
                                    h = instance_position(x, y, Hex);
                                    if(h)
                                    {
                                        h.pathDistance = 0;
                                        z = 0;
                                        pathDist = 1;
                                        path_check_around(h);
                                        
                                        while(!pathFound || z &lt; 400)
                                        {
                                            for(i = 0; i &lt; instance_number(Hex); i++)
                                            {
                                                a = instance_find(Hex, i);
                                                
                                                if(a.pathDistance == pathDist)
                                                {
                                                    if(a == gotoHex)
                                                    {
                                                        pathFound = true;
                                                    }
                                                    else
                                                    {
                                                        path_check_around(a);
                                                    }
                                                }
                                                
                                            }
                                            pathDist++;
                                            z++;
                                        }
                                        if(pathFound)
                                        {
                                            gotoHex.pathMoveMark = true;
                                            path_check_parent(gotoHex);
                                        }
                                    }
                                }
                            }
                            if(ap &gt;= 20)
                            {
                                while(ap &lt; gotoHex.pathDistance * 20)
                                {
                                    gotoHex = gotoHex.pathParent;
                                }
                                instance_create(gotoHex.x, gotoHex.y, MoveMarker);
                                ap -= gotoHex.pathDistance * 20;
                            }
                        }
                    }
                    
                }
                else //buff
                {
                    
                }
                stage++;
            }
            else if(stage == 3) //akcja
            {
                //show_message("3 - akcja");
                if(action[actionid,0] == 1) //w zwarciu
                {
                    apcost = action[actionid, 2];
                    
                    target = instance_find(Hero, 0);
                    curDist = sqrt( (x - target.x)*(x - target.x) + 4*(y - target.y)*(y - target.y) );
                    
                    for(t = 1; t &lt; 4; t++)
                    {
                        cur = instance_find(Hero, t);
                        if(sqrt( (x - cur.x)*(x - cur.x) + 4*(y - cur.y)*(y - cur.y) ) &lt; sqrt( (x - target.x)*(x - target.x) + 4*(y - target.y)*(y - target.y) ))
                        {
                            target = cur;
                            curDist = sqrt( (x - target.x)*(x - target.x) + 4*(y - target.y)*(y - target.y) );
                        }
                    }
                    
                    if(ap &gt;= apcost)
                    {
                        direction = point_direction(x, y, target.x, target.y);
                        if(animation_alarm &lt; 0) animation_alarm = room_speed;
                        //wykonaj akcje
                        effect_create_above(ef_explosion, target.x, target.y, 0, c_white);
                        ap -= apcost;
                        target.hp -= action[actionid, 1];
                        stage = 0;
                    }
                    else
                    {
                        Ctrl.nextturn = true;
                        ap = maxap;
                        stage = 0;
                        //if(alarm[1] == -1) alarm[1] = room_speed*2;
                    }
                }
                else if(action[actionid, 0] == 0) //dystansowy
                {
                    apcost = action[actionid, 2];
                    
                    if(ap &gt;= apcost)
                    {
                        direction = point_direction(x, y, target.x, target.y);
                        if(animation_alarm &lt; 0) animation_alarm = room_speed;
                        //wykonaj akcje
                        effect_create_above(ef_explosion, target.x, target.y, 0, c_white);
                        ap -= apcost;
                        target.hp -= action[actionid, 1];
                        stage = 0;
                    }
                }
            }
        }
    }
}

nearest = instance_nearest(x,y,Hero);
if(sqrt((x-nearest.x)*(x-nearest.x)+((y-nearest.y)*(y-nearest.y)*4))&lt;=250 &amp;&amp; Ctrl.mode==0 &amp;&amp; hp&gt;0) 
{
    battle=true;
    for(i=0;i&lt;instance_number(Enemy);i++)
    {
        current=instance_find(Enemy,i);
        if(current.link==link)
        {
            current.battle=true;
        }
    }
    Ctrl.hexcenter_x = (link.x + nearest.x)/2;
    Ctrl.hexcenter_y = (link.y + nearest.y)/2;
    Ctrl.mode = 1;
}

if(Ctrl.mode==0 &amp;&amp; battle==true &amp;&amp; hp&lt;=0 &amp;&amp; alarm[0]==-1 &amp;&amp; dead==0)
{
    dead=1;
    alarm[0]=room_speed*10;
}

if(dead==2)
{
    if(image_alpha&gt;0) image_alpha-=1/room_speed;
}

if(image_alpha&lt;=0) instance_destroy();

if(place_meeting(x,y,TreeShadow)) inshadow = true;
else inshadow = false;

if(inshadow)
{
    if(blend &gt; 60) blend-=20;
}
else
{
    if(blend &lt; 255) blend+=20;
}

if(blend &lt; 60) blend = 60;
if(blend &gt; 255) blend = 255;

if(hp&lt;=0 &amp;&amp; image_angle&lt;90) image_angle+=5;
else if(hp&gt;0 &amp;&amp; image_angle&gt;0) image_angle-=5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="HitMarker">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(Ctrl.heroesturn) hp -= 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(battle=true)
{
    hp = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(marked)
{
    d3d_set_fog(true,markedc,0,0);

    draw_sprite_ext(sprite_index,image_index,x-4,y-4,1,1,image_angle,markedc,1);
    draw_sprite_ext(sprite_index,image_index,x,y-4,1,1,image_angle,markedc,1);
    draw_sprite_ext(sprite_index,image_index,x+4,y-4,1,1,image_angle,markedc,1);
    
    draw_sprite_ext(sprite_index,image_index,x-4,y,1,1,image_angle,markedc,1);
    draw_sprite_ext(sprite_index,image_index,x+4,y,1,1,image_angle,markedc,1);
    
    draw_sprite_ext(sprite_index,image_index,x-4,y+4,1,1,image_angle,markedc,1);
    draw_sprite_ext(sprite_index,image_index,x,y+4,1,1,image_angle,markedc,1);
    draw_sprite_ext(sprite_index,image_index,x+4,y+4,1,1,image_angle,markedc,1);

    d3d_set_fog(false,c_white,0,0);
}

if(battle &amp;&amp; speed == 0) draw_sprite_part(sprDirIndicator, round(direction/60), 0, 0, 96, 48, x - 48, y - 48);

draw_sprite_ext(sprite_index,image_index,x,y,1,1,image_angle,make_colour_rgb(blend,blend,blend),image_alpha);

if(battle &amp;&amp; speed == 0) draw_sprite_part(sprDirIndicator, round(direction/60), 0, 48, 96, 48, x - 48, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
