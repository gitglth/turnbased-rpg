<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprHero</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>BattleParent</parentName>
  <maskName>sprMask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_speed = 0;
dead = 0;
/*
buff:
    1 - regen
    2 - swiftness
    
debuff:
    1 - bleed
    2 - burn
    3 - poison
    4 - stun
    5 - knockdown
*/

for(i = 0; i &lt; 8; i++)
{
    buff[i, 0] = 0;
    buff[i, 1] = 0;
    buff[i, 2] = 0;
    
    debuff[i, 0] = 0;
    debuff[i, 1] = 0;
    debuff[i, 2] = 0;
}

image_scale = 1;
myturn = -1;
hp = 1000;
maxhp = hp;
hpPrevious = hp;
ap = 100;
maxap = ap;
initiative = round(random(1000));
blend = 255;
inshadow = false;
height = 128;
marked = false;
markedc = c_black;
no_movement_timer = 0;

surf = surface_create(128, 128);
x_shift = 0;
y_shift = 0;

default_armback = 10;
default_forearmback = 10;
default_handback = 0;

default_armfront = -10;
default_forearmfront = 10;
default_handfront = 0;

default_legback = 0;
default_forelegback = 0;
default_footback = 10;

default_legfront = -5;
default_forelegfront = 0;
default_footfront = 0;

default_body = 0;
default_head = 0;

dir_armback = default_armback;
dir_forearmback = default_forearmback;
dir_handback = default_handback;
dir_legback = default_legback;
dir_forelegback = default_forelegback;
dir_footback = default_footback;
dir_body = default_body;
dir_head = default_head;
dir_legfront = default_legfront;
dir_forelegfront = default_forelegfront;
dir_footfront = default_footfront;
dir_armfront = default_armfront;
dir_forearmfront = default_forearmfront;
dir_handfront = default_handfront;

change_armback = 0;
change_forearmback = 0;
change_handback = 0;
change_legback = 0;
change_forelegback = 0;
change_footback = 0;
change_body = 0;
change_head = 0;
change_legfront = 0;
change_forelegfront = 0;
change_footfront = 0;
change_armfront = 0;
change_forearmfront = 0;
change_handfront = 0;

lendir_armback[0] = point_distance(0,0,3,-10) * image_scale;
lendir_armback[1] = point_direction(0,0,3,-10);
lendir_armback[2] = lendir_armback[1] + 2 * angle_difference(90,lendir_armback[1]);

lendir_forearmback[0] = point_distance(0,0,-1,11) * image_scale;
lendir_forearmback[1] = point_direction(0,0,-1,11);
lendir_forearmback[2] = lendir_forearmback[1] + 2 * angle_difference(90,lendir_forearmback[1]);

lendir_handback[0] = point_distance(0,0,0,7) * image_scale;
lendir_handback[1] = point_direction(0,0,0,7);
lendir_handback[2] = lendir_handback[1] + 2 * angle_difference(90,lendir_handback[1]);


lendir_legback[0] = point_distance(0,0,4,10) * image_scale;
lendir_legback[1] = point_direction(0,0,4,10);
lendir_legback[2] = lendir_legback[1] + 2 * angle_difference(90,lendir_legback[1]);

lendir_forelegback[0] = point_distance(0,0,0,8) * image_scale;
lendir_forelegback[1] = point_direction(0,0,0,8);
lendir_forelegback[2] = lendir_forelegback[1] + 2 * angle_difference(90,lendir_forelegback[1]);

lendir_footback[0] = point_distance(0,0,0,8) * image_scale;
lendir_footback[1] = point_direction(0,0,0,8);
lendir_footback[2] = lendir_footback[1] + 2 * angle_difference(90,lendir_footback[1]);


lendir_headside[0] = point_distance(0,0,-3,-14) * image_scale;
lendir_headside[1] = point_direction(0,0,-3,-14);
lendir_headside[2] = lendir_headside[1] + 2 * angle_difference(90,lendir_headside[1]);


lendir_legfront[0] = point_distance(0,0,-2,12) * image_scale;
lendir_legfront[1] = point_direction(0,0,-2,12);
lendir_legfront[2] = lendir_legfront[1] + 2 * angle_difference(90,lendir_legfront[1]);

lendir_forelegfront[0] = point_distance(0,0,0,8) * image_scale;
lendir_forelegfront[1] = point_direction(0,0,0,8);
lendir_forelegfront[2] = lendir_forelegfront[1] + 2 * angle_difference(90,lendir_forelegfront[1]);

lendir_footfront[0] = point_distance(0,0,0,8) * image_scale;
lendir_footfront[1] = point_direction(0,0,0,8);
lendir_footfront[2] = lendir_footfront[1] + 2 * angle_difference(90,lendir_footfront[1]);


lendir_armfront[0] = point_distance(0,0,-5,-10) * image_scale;
lendir_armfront[1] = point_direction(0,0,-5,-10);
lendir_armfront[2] = lendir_armfront[1] + 2 * angle_difference(90,lendir_armfront[1]);

lendir_forearmfront[0] = point_distance(0,0,-1,11) * image_scale;
lendir_forearmfront[1] = point_direction(0,0,-1,11);
lendir_forearmfront[2] = lendir_forearmfront[1] + 2 * angle_difference(90,lendir_forearmfront[1]);

lendir_handfront[0] = point_distance(0,0,0,7) * image_scale;
lendir_handfront[1] = point_direction(0,0,0,7);
lendir_handfront[2] = lendir_handfront[1] + 2 * angle_difference(90,lendir_handfront[1]);


if(instance_number(Hero) == 1)
{
    number = 1;
    Camera.follow = id;
    
    xx = round(x-64+random(128));
    yy = round(y-32+random(64));
    while(!place_free(xx,yy))
    {
        xx = round(x-64+random(128));
        yy = round(y-32+random(64));
    }
    h2 = instance_create(xx,yy,Hero);
    h2.image_index = 1;
    h2.number = 2;
    
    while(!place_free(xx,yy))
    {
        xx = round(x-64+random(128));
        yy = round(y-32+random(64));
    }
    h3 = instance_create(xx,yy,Hero);
    h3.image_index = 2;
    h3.number = 3;
    
    while(!place_free(xx,yy))
    {
        xx = round(x-64+random(128));
        yy = round(y-32+random(64));
    }
    h4 = instance_create(xx,yy,Hero);
    h4.image_index = 3;
    h4.number = 4;
    
    battle=false;
    h2.battle=false;
    h3.battle=false;
    h4.battle=false;
    
    InvCtrl.h1[0] = self;
    InvCtrl.h2[0] = h2;
    InvCtrl.h3[0] = h3;
    InvCtrl.h4[0] = h4;
}

else
{
    hx = x;
    hy = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = -y;

switch(number)
{
    case 1:
        for(i = 0; i &lt; 7; i++)
        {
            if(InvCtrl.eq1[i, 1] != -1)
            {
                for(j = 0; j &lt; 6; j++)
                {
                    eq[i, j] = InvCtrl.eq1[i, j];
                }
            }
            else eq[i, 1] = -1;
        }
        break;
    case 2:
        for(i = 0; i &lt; 7; i++)
        {
            if(InvCtrl.eq2[i, 1] != -1)
            {
                for(j = 0; j &lt; 6; j++)
                {
                    eq[i, j] = InvCtrl.eq2[i, j];
                }
            }
            else eq[i, 1] = -1;
        }
        break;
    case 3:
        for(i = 0; i &lt; 7; i++)
        {
            if(InvCtrl.eq3[i, 1] != -1)
            {
                for(j = 0; j &lt; 6; j++)
                {
                    eq[i, j] = InvCtrl.eq3[i, j];
                }
            }
            else eq[i, 1] = -1;
        }
        break;
    case 4:
        for(i = 0; i &lt; 7; i++)
        {
            if(InvCtrl.eq4[i, 1] != -1)
            {
                for(j = 0; j &lt; 6; j++)
                {
                    eq[i, j] = InvCtrl.eq4[i, j];
                }
            }
            else eq[i, 1] = -1;
        }
        break;
}

if(hpPrevious != hp)
{
    dn = instance_create(x, y - 96, DamageNumber);
    dn.damage = hpPrevious - hp;
}

hpPrevious = hp;

if(direction &gt; 90 &amp;&amp; direction &lt; 270) model_dir = 2;
else model_dir = 0;

if(speed &gt; 0 &amp;&amp; !timeline_running)
{
    timeline_index = animRun;
    timeline_position = 0;
    timeline_speed = 2;
    timeline_loop = false;
    timeline_running = true;
}

/*
if(number == 1)
{
    if(speed == 0) timeline_running = false;
}
else
{
    if(speed &gt; 0) no_movement_timer = 0;
    if(speed == 0 &amp;&amp; no_movement_timer &lt; 4) no_movement_timer ++;
    if(no_movement_timer &gt;= 4) timeline_running = false;
}*/

if(change_legback != 0) dir_legback += change_legback * timeline_speed;
if(change_forelegback != 0) dir_forelegback += change_forelegback * timeline_speed;
if(change_footback != 0) dir_footback += change_footback * timeline_speed;

if(change_legfront != 0) dir_legfront += change_legfront * timeline_speed;
if(change_forelegfront != 0) dir_forelegfront += change_forelegfront * timeline_speed;
if(change_footfront != 0) dir_footfront += change_footfront * timeline_speed;

if(change_armback != 0) dir_armback += change_armback * timeline_speed;
if(change_forearmback != 0) dir_forearmback += change_forearmback * timeline_speed;
if(change_handback != 0) dir_handback += change_handback * timeline_speed;

if(change_armfront != 0) dir_armfront += change_armfront * timeline_speed;
if(change_forearmfront != 0) dir_forearmfront += change_forearmfront * timeline_speed;
if(change_handfront != 0) dir_handfront += change_handfront * timeline_speed;

if(change_body != 0) dir_body += change_body * timeline_speed;
if(change_head != 0) dir_head += change_head * timeline_speed;

if(!timeline_running)
{
    dir_armback = default_armback;
    dir_forearmback = default_forearmback;
    dir_handback = default_handback;
    dir_legback = default_legback;
    dir_forelegback = default_forelegback;
    dir_footback = default_footback;
    dir_body = default_body;
    dir_head = default_head;
    dir_legfront = default_legfront;
    dir_forelegfront = default_forelegfront;
    dir_footfront = default_footfront;
    dir_armfront = default_armfront;
    dir_forearmfront = default_forearmfront;
    dir_handfront = default_handfront;
    
    change_armback = 0;
    change_forearmback = 0;
    change_handback = 0;
    change_legback = 0;
    change_forelegback = 0;
    change_footback = 0;
    change_body = 0;
    change_head = 0;
    change_legfront = 0;
    change_forelegfront = 0;
    change_footfront = 0;
    change_armfront = 0;
    change_forearmfront = 0;
    change_handfront = 0;
}

if(Ctrl.mode==1)
{
    if(myturn==Ctrl.turn)
    {
        Ctrl.currentChar = id;
        if(hp&lt;=0) Ctrl.nextturn = true;
    }
    battle=true;
}
else
{
    battle=false;
}

if(Ctrl.mode==0)
{
    if(number&gt;1)
    {
        maxspeed=3*(1/2+abs(cos(degtorad(point_direction(x,y,mouse_x,mouse_y))))*1/2);
        if(point_distance(x,y,hx,hy)&gt;=maxspeed)
        {
            if(place_free(lengthdir_x(maxspeed,point_direction(x,y,hx,hy)),lengthdir_y(maxspeed,point_direction(x,y,hx,hy))))
            {
                move_towards_point(hx,hy,maxspeed);
            }
            else speed=0;
        }
        else speed=0;
    }
    
    else
    {
        maxspeed=2*(1/2+abs(cos(degtorad(direction)))*1/2);
        
        if(Ctrl.mode==0)
        {
            direction = point_direction(x,y,mouse_x,mouse_y);
            
            if(mouse_check_button(mb_left) &amp;&amp; Ctrl.onHud == false &amp;&amp; InvCtrl.show_char == false &amp;&amp; InvCtrl.show_inv == false &amp;&amp; Ctrl.show_loot == false)
            {
                if(place_free(x+lengthdir_x(2*maxspeed,point_direction(x,y,mouse_x,mouse_y)),y+lengthdir_y(2*maxspeed,point_direction(x,y,mouse_x,mouse_y))))
                {
                    move_towards_point(mouse_x,mouse_y,maxspeed);
                    h2.hx = x+lengthdir_x(64,point_direction(x,y,mouse_x,mouse_y)+120);
                    h2.hy = y+lengthdir_y(64,point_direction(x,y,mouse_x,mouse_y)+120);
                    h3.hx = x+lengthdir_x(64,point_direction(x,y,mouse_x,mouse_y)+180);
                    h3.hy = y+lengthdir_y(64,point_direction(x,y,mouse_x,mouse_y)+180);
                    h4.hx = x+lengthdir_x(64,point_direction(x,y,mouse_x,mouse_y)+240);
                    h4.hy = y+lengthdir_y(64,point_direction(x,y,mouse_x,mouse_y)+240);
                }
                else speed=0;
            }
            else speed=0;
        }
    }
}

if(Ctrl.mode==1)
{
    maxspeed=3*(1/2+abs(cos(degtorad(direction)))*1/2);
    speed = 0;
    if(Ctrl.turn==myturn)
    {
        if(instance_exists(MoveMarker))
        {
            for(mh = 1; mh &lt;= 7; mh++)
            {
                moveHex = instance_nearest2(x, y, Hex, mh);
                if(moveHex.pathMoveMark) break;
                if(mh == 7)
                {
                    with(MoveMarker) instance_destroy();
                }
            }
            
            direction = point_direction(x, y, moveHex.x, moveHex.y);
            if(point_distance(x, y, moveHex.x, moveHex.y) &gt; maxspeed) move_towards_point(moveHex.x, moveHex.y, maxspeed);
            else
            {
                x = moveHex.x;
                y = moveHex.y;
                speed = 0;
                moveHex.pathMoveMark = false;
            }
        }
        else speed = 0;
    }
}

if(position_meeting(x, y, TreeShadow)) inshadow = true;
else inshadow = false;

if(inshadow)
{
    if(blend &gt; 60) blend -= 40;
}
else
{
    if(blend &lt; 255) blend += 40;
}

if(blend &lt; 60) blend = 60;
if(blend &gt; 255) blend = 255;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="HitMarker">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(!Ctrl.heroesturn) hp -= InvCtrl.action[(Ctrl.actionid), 1];;

if(ActionCtrl.action[Ctrl.actionid, 6])
{
    if(ActionCtrl.action[Ctrl.actionid, 6] &lt;= 15)
    {
        for(i = 0; i &lt; 8; i++)
        {
            if(buff[i, 0] == 0)
            {
                buff[i, 0] = ActionCtrl.action[Ctrl.actionid, 6];
                buff[i, 1] = ActionCtrl.action[Ctrl.actionid, 7];
                break;
            }
        }
    }
    else
    {
        for(i = 0; i &lt; 8; i++)
        {
            if(debuff[i, 0] == 0)
            {
                debuff[i, 0] = ActionCtrl.action[Ctrl.actionid, 6];
                debuff[i, 1] = ActionCtrl.action[Ctrl.actionid, 7];
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_self();
//if(marked) draw_sprite_ext(sprBodySide,0,x,y,1,1,0,markedc,1);

if(battle &amp;&amp; speed == 0) draw_sprite_part(sprDirIndicator, round(direction/60), 0, 0, 96, 48, x - 48, y - 48);

if(!surface_exists(surf)) surf = surface_create(128, 128);
surface_set_target(surf);
draw_clear_alpha(c_black,0);

//tyl
if(eq[3, 1] == -1) draw_sprite_ext(sprArm, 0, 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]), image_xscale, image_yscale, dir_armback, c_white, image_alpha);
else draw_sprite_ext(sprEqArm, eq[3, 5], 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]), image_xscale, image_yscale, dir_armback, c_white, image_alpha);
if(eq[3, 1] == -1) draw_sprite_ext(sprForeArm, 0, 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_x(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_y(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]), image_xscale, image_yscale, dir_armback + dir_forearmback, c_white, image_alpha);
else draw_sprite_ext(sprEqForeArm, eq[3, 5], 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_x(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_y(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]), image_xscale, image_yscale, dir_armback + dir_forearmback, c_white, image_alpha);
if(eq[5, 1] == -1) draw_sprite_ext(sprHand, 0, 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_x(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]) + lengthdir_x(lendir_handback[0], dir_body + dir_armback + dir_forearmback + lendir_handback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_y(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]) + lengthdir_y(lendir_handback[0], dir_body + dir_armback + dir_forearmback + lendir_handback[1]), image_xscale, image_yscale, dir_armback + dir_forearmback + dir_handback, c_white, image_alpha);
else draw_sprite_ext(sprEqHand, eq[5, 5], 64 + x_shift + lengthdir_x(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_x(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]) + lengthdir_x(lendir_handback[0], dir_body + dir_armback + dir_forearmback + lendir_handback[1]), 64  + y_shift + lengthdir_y(lendir_armback[0], dir_body + lendir_armback[1]) + lengthdir_y(lendir_forearmback[0], dir_body + dir_armback + lendir_forearmback[1]) + lengthdir_y(lendir_handback[0], dir_body + dir_armback + dir_forearmback + lendir_handback[1]), image_xscale, image_yscale, dir_armback + dir_forearmback + dir_handback, c_white, image_alpha);

if(eq[4, 1] == -1) draw_sprite_ext(sprLeg, 0, 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]), image_xscale, image_yscale, dir_legback, c_white, image_alpha);
else draw_sprite_ext(sprEqLeg, eq[4, 5], 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]), image_xscale, image_yscale, dir_legback, c_white, image_alpha);
if(eq[4, 1] == -1) draw_sprite_ext(sprForeLeg, 0, 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_x(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_y(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]), image_xscale, image_yscale, dir_legback + dir_forelegback, c_white, image_alpha);
else draw_sprite_ext(sprEqForeLeg, eq[4, 5], 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_x(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_y(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]), image_xscale, image_yscale, dir_legback + dir_forelegback, c_white, image_alpha);
if(eq[6, 1] == -1) draw_sprite_ext(sprFoot, 0, 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_x(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]) + lengthdir_x(lendir_footback[0], dir_body + dir_legback + dir_forelegback + lendir_footback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_y(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]) + lengthdir_y(lendir_footback[0], dir_body + dir_legback + dir_forelegback + lendir_footback[1]), image_xscale, image_yscale, dir_legback + dir_forelegback + dir_footback, c_white, image_alpha);
else draw_sprite_ext(sprEqFoot, eq[6, 5], 64 + x_shift + lengthdir_x(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_x(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]) + lengthdir_x(lendir_footback[0], dir_body + dir_legback + dir_forelegback + lendir_footback[1]), 64  + y_shift + lengthdir_y(lendir_legback[0], dir_body + lendir_legback[1]) + lengthdir_y(lendir_forelegback[0], dir_body + dir_legback + lendir_forelegback[1]) + lengthdir_y(lendir_footback[0], dir_body + dir_legback + dir_forelegback + lendir_footback[1]), image_xscale, image_yscale, dir_legback + dir_forelegback + dir_footback, c_white, image_alpha);

//srodek
if(eq[3, 1] == -1) draw_sprite_ext(sprBodySide, 0, 64 + x_shift, 64  + y_shift, image_xscale, image_yscale, dir_body, c_white, image_alpha);
else draw_sprite_ext(sprEqBody, eq[3, 5], 64 + x_shift, 64  + y_shift, image_xscale, image_yscale, dir_body, c_white, image_alpha);
draw_sprite_ext(sprHeadSide, 0, 64 + x_shift + lengthdir_x(lendir_headside[0], dir_body + lendir_headside[1]), 64  + y_shift + lengthdir_y(lendir_headside[0], dir_body + lendir_headside[1]), image_xscale, image_yscale, dir_head, c_white, image_alpha);
if(eq[2, 1] != -1) draw_sprite_ext(sprEqHead, eq[2, 5], 64 + x_shift + lengthdir_x(lendir_headside[0], dir_body + lendir_headside[1]), 64  + y_shift + lengthdir_y(lendir_headside[0], dir_body + lendir_headside[1]), image_xscale, image_yscale, dir_head, c_white, image_alpha);

//przod
if(eq[4, 1] == -1) draw_sprite_ext(sprLeg, 0, 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]), image_xscale, image_yscale, dir_legfront, c_white, image_alpha);
else draw_sprite_ext(sprEqLeg, eq[4, 5], 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]), image_xscale, image_yscale, dir_legfront, c_white, image_alpha);
if(eq[4, 1] == -1) draw_sprite_ext(sprForeLeg, 0, 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_x(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_y(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]), image_xscale, image_yscale, dir_legfront + dir_forelegfront, c_white, image_alpha);
else draw_sprite_ext(sprEqForeLeg, eq[4, 5], 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_x(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_y(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]), image_xscale, image_yscale, dir_legfront + dir_forelegfront, c_white, image_alpha);
if(eq[6, 1] == -1) draw_sprite_ext(sprFoot, 0, 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_x(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]) + lengthdir_x(lendir_footfront[0], dir_body + dir_legfront + dir_forelegfront + lendir_footfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_y(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]) + lengthdir_y(lendir_footfront[0], dir_body + dir_legfront + dir_forelegfront + lendir_footfront[1]), image_xscale, image_yscale, dir_legfront + dir_forelegfront + dir_footfront, c_white, image_alpha);
else draw_sprite_ext(sprEqFoot, eq[6, 5], 64 + x_shift + lengthdir_x(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_x(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]) + lengthdir_x(lendir_footfront[0], dir_body + dir_legfront + dir_forelegfront + lendir_footfront[1]), 64  + y_shift + lengthdir_y(lendir_legfront[0], dir_body + lendir_legfront[1]) + lengthdir_y(lendir_forelegfront[0], dir_body + dir_legfront + lendir_forelegfront[1]) + lengthdir_y(lendir_footfront[0], dir_body + dir_legfront + dir_forelegfront + lendir_footfront[1]), image_xscale, image_yscale, dir_legfront + dir_forelegfront + dir_footfront, c_white, image_alpha);

if(eq[3, 1] == -1) draw_sprite_ext(sprArm, 0, 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]), image_xscale, image_yscale, dir_armfront, c_white, image_alpha);
else draw_sprite_ext(sprEqArm, eq[3, 5], 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]), image_xscale, image_yscale, dir_armfront, c_white, image_alpha);
if(eq[3, 1] == -1) draw_sprite_ext(sprForeArm, 0, 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_x(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_y(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]), image_xscale, image_yscale, dir_armfront + dir_forearmfront, c_white, image_alpha);
else draw_sprite_ext(sprEqForeArm, eq[3, 5], 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_x(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_y(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]), image_xscale, image_yscale, dir_armfront + dir_forearmfront, c_white, image_alpha);
if(eq[5, 1] == -1) draw_sprite_ext(sprHand, 0, 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_x(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]) + lengthdir_x(lendir_handfront[0], dir_body + dir_armfront + dir_forearmfront + lendir_handfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_y(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]) + lengthdir_y(lendir_handfront[0], dir_body + dir_armfront + dir_forearmfront + lendir_handfront[1]), image_xscale, image_yscale, dir_armfront + dir_forearmfront + dir_handfront, c_white, image_alpha);
else draw_sprite_ext(sprEqHand, eq[5, 5], 64 + x_shift + lengthdir_x(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_x(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]) + lengthdir_x(lendir_handfront[0], dir_body + dir_armfront + dir_forearmfront + lendir_handfront[1]), 64  + y_shift + lengthdir_y(lendir_armfront[0], dir_body + lendir_armfront[1]) + lengthdir_y(lendir_forearmfront[0], dir_body + dir_armfront + lendir_forearmfront[1]) + lengthdir_y(lendir_handfront[0], dir_body + dir_armfront + dir_forearmfront + lendir_handfront[1]), image_xscale, image_yscale, dir_armfront + dir_forearmfront + dir_handfront, c_white, image_alpha);

surface_reset_target();
if(model_dir == 0) draw_surface_ext(surf, x - 64, y - 94, 1, 1, 0, c_white, 1);
if(model_dir == 2) draw_surface_ext(surf, x + 64, y - 94, -1, 1, 0, c_white, 1);

if(battle &amp;&amp; speed == 0) draw_sprite_part(sprDirIndicator, round(direction/60), 0, 48, 96, 48, x - 48, y);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
